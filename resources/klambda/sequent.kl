(defun shen.<datatype> (V8263) (let Result (if (shen.non-empty-stream? V8263) (let D (shen.hds V8263) (let News8123 (shen.tls V8263) (let Parseshen.<datatype-rules> (shen.<datatype-rules> News8123) (if (shen.parse-failure? Parseshen.<datatype-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<datatype-rules>) (let Prolog (shen.rules->prolog D (shen.<-out Parseshen.<datatype-rules>)) (shen.remember-datatype D (fn D)))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<datatype-rules> (V8264) (let Result (let Parseshen.<datatype-rule> (shen.<datatype-rule> V8264) (if (shen.parse-failure? Parseshen.<datatype-rule>) (shen.parse-failure) (let Parseshen.<datatype-rules> (shen.<datatype-rules> Parseshen.<datatype-rule>) (if (shen.parse-failure? Parseshen.<datatype-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<datatype-rules>) (append (shen.<-out Parseshen.<datatype-rule>) (shen.<-out Parseshen.<datatype-rules>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V8264) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "datatype syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<datatype-rule> (V8265) (let Result (let Parseshen.<single> (shen.<single> V8265) (if (shen.parse-failure? Parseshen.<single>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<single>) (shen.<-out Parseshen.<single>)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<double> (shen.<double> V8265) (if (shen.parse-failure? Parseshen.<double>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<double>) (shen.<-out Parseshen.<double>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<single> (V8266) (let Result (let Parseshen.<sides> (shen.<sides> V8266) (if (shen.parse-failure? Parseshen.<sides>) (shen.parse-failure) (let Parseshen.<prems> (shen.<prems> Parseshen.<sides>) (if (shen.parse-failure? Parseshen.<prems>) (shen.parse-failure) (let Parseshen.<sng> (shen.<sng> Parseshen.<prems>) (if (shen.parse-failure? Parseshen.<sng>) (shen.parse-failure) (let Parseshen.<conc> (shen.<conc> Parseshen.<sng>) (if (shen.parse-failure? Parseshen.<conc>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<conc>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (cons (shen.<-out Parseshen.<sides>) (cons (shen.<-out Parseshen.<prems>) (cons (shen.<-out Parseshen.<conc>) ()))) ())))))))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<double> (V8267) (let Result (let Parseshen.<sides> (shen.<sides> V8267) (if (shen.parse-failure? Parseshen.<sides>) (shen.parse-failure) (let Parseshen.<formulae> (shen.<formulae> Parseshen.<sides>) (if (shen.parse-failure? Parseshen.<formulae>) (shen.parse-failure) (let Parseshen.<dbl> (shen.<dbl> Parseshen.<formulae>) (if (shen.parse-failure? Parseshen.<dbl>) (shen.parse-failure) (let Parseshen.<formula> (shen.<formula> Parseshen.<dbl>) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (shen.lr-rule (shen.<-out Parseshen.<sides>) (shen.<-out Parseshen.<formulae>) (cons () (cons (shen.<-out Parseshen.<formula>) ())))))))))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<formulae> (V8268) (let Result (let Parseshen.<formula> (shen.<formula> V8268) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (let Parseshen.<formulae> (shen.<formulae> Parseshen.<sc>) (if (shen.parse-failure? Parseshen.<formulae>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formulae>) (cons (cons () (cons (shen.<-out Parseshen.<formula>) ())) (shen.<-out Parseshen.<formulae>))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8268) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (cons () (cons (shen.<-out Parseshen.<formula>) ())) ())))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<conc> (V8269) (let Result (let Parseshen.<ass> (shen.<ass> V8269) (if (shen.parse-failure? Parseshen.<ass>) (shen.parse-failure) (if (shen.=hd? Parseshen.<ass> >>) (let News8130 (shen.tls Parseshen.<ass>) (let Parseshen.<formula> (shen.<formula> News8130) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons (shen.<-out Parseshen.<ass>) (cons (shen.<-out Parseshen.<formula>) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8269) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons () (cons (shen.<-out Parseshen.<formula>) ()))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<prems> (V8270) (let Result (let Parseshen.<prem> (shen.<prem> V8270) (if (shen.parse-failure? Parseshen.<prem>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<prem>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (let Parseshen.<prems> (shen.<prems> Parseshen.<sc>) (if (shen.parse-failure? Parseshen.<prems>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<prems>) (cons (shen.<-out Parseshen.<prem>) (shen.<-out Parseshen.<prems>))))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V8270) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<prem> (V8271) (let Result (if (shen.=hd? V8271 !) (let News8133 (shen.tls V8271) (shen.comb (shen.in-> News8133) !)) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (let Parseshen.<ass> (shen.<ass> V8271) (if (shen.parse-failure? Parseshen.<ass>) (shen.parse-failure) (if (shen.=hd? Parseshen.<ass> >>) (let News8134 (shen.tls Parseshen.<ass>) (let Parseshen.<formula> (shen.<formula> News8134) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons (shen.<-out Parseshen.<ass>) (cons (shen.<-out Parseshen.<formula>) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8271) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons () (cons (shen.<-out Parseshen.<formula>) ()))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<ass> (V8272) (let Result (let Parseshen.<formula> (shen.<formula> V8272) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<iscomma> (shen.<iscomma> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<iscomma>) (shen.parse-failure) (let Parseshen.<ass> (shen.<ass> Parseshen.<iscomma>) (if (shen.parse-failure? Parseshen.<ass>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<ass>) (cons (shen.<-out Parseshen.<formula>) (shen.<-out Parseshen.<ass>))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8272) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons (shen.<-out Parseshen.<formula>) ())))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V8272) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<iscomma> (V8273) (let Result (if (shen.non-empty-stream? V8273) (let X (shen.hds V8273) (let News8137 (shen.tls V8273) (if (= X (intern ",")) (shen.comb (shen.in-> News8137) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<formula> (V8274) (let Result (let Parseshen.<expr> (shen.<expr> V8274) (if (shen.parse-failure? Parseshen.<expr>) (shen.parse-failure) (let Parseshen.<iscolon> (shen.<iscolon> Parseshen.<expr>) (if (shen.parse-failure? Parseshen.<iscolon>) (shen.parse-failure) (let Parseshen.<type> (shen.<type> Parseshen.<iscolon>) (if (shen.parse-failure? Parseshen.<type>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<type>) (cons (shen.curry (shen.<-out Parseshen.<expr>)) (cons (intern ":") (cons (shen.rectify-type (shen.<-out Parseshen.<type>)) ())))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<expr> (shen.<expr> V8274) (if (shen.parse-failure? Parseshen.<expr>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<expr>) (shen.<-out Parseshen.<expr>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<iscolon> (V8275) (let Result (if (shen.non-empty-stream? V8275) (let X (shen.hds V8275) (let News8140 (shen.tls V8275) (if (= X (intern ":")) (shen.comb (shen.in-> News8140) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sides> (V8276) (let Result (let Parseshen.<side> (shen.<side> V8276) (if (shen.parse-failure? Parseshen.<side>) (shen.parse-failure) (let Parseshen.<sides> (shen.<sides> Parseshen.<side>) (if (shen.parse-failure? Parseshen.<sides>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sides>) (cons (shen.<-out Parseshen.<side>) (shen.<-out Parseshen.<sides>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V8276) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<side> (V8277) (let Result (if (shen.=hd? V8277 if) (let News8143 (shen.tls V8277) (if (shen.non-empty-stream? News8143) (let P (shen.hds News8143) (let News8144 (shen.tls News8143) (shen.comb (shen.in-> News8144) (cons if (cons P ()))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.=hd? V8277 let) (let News8145 (shen.tls V8277) (if (shen.non-empty-stream? News8145) (let X (shen.hds News8145) (let News8146 (shen.tls News8145) (if (shen.non-empty-stream? News8146) (let Y (shen.hds News8146) (let News8147 (shen.tls News8146) (shen.comb (shen.in-> News8147) (cons let (cons X (cons Y ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.=hd? V8277 shen.let!) (let News8148 (shen.tls V8277) (if (shen.non-empty-stream? News8148) (let X (shen.hds News8148) (let News8149 (shen.tls News8148) (if (shen.non-empty-stream? News8149) (let Y (shen.hds News8149) (let News8150 (shen.tls News8149) (shen.comb (shen.in-> News8150) (cons shen.let! (cons X (cons Y ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.lr-rule (V8284 V8285 V8286) (cond ((and (cons? V8286) (and (= () (hd V8286)) (and (cons? (tl V8286)) (= () (tl (tl V8286)))))) (let P (gensym P) (let LConc (cons (tl V8286) (cons P ())) (let LPrem (cons (shen.coll-formulae V8285) (cons P ())) (let Left (cons V8284 (cons (cons LPrem ()) (cons LConc ()))) (let Right (cons V8284 (cons V8285 (cons V8286 ()))) (cons Right (cons Left ())))))))) (true (simple-error "implementation error in shen.lr-rule"))))

(defun shen.coll-formulae (V8289) (cond ((= () V8289) ()) ((and (cons? V8289) (and (cons? (hd V8289)) (and (= () (hd (hd V8289))) (and (cons? (tl (hd V8289))) (= () (tl (tl (hd V8289)))))))) (cons (hd (tl (hd V8289))) (shen.coll-formulae (tl V8289)))) (true (simple-error "implementation error in shen.coll-formulae"))))

(defun shen.<expr> (V8290) (let Result (if (shen.non-empty-stream? V8290) (let X (shen.hds V8290) (let News8152 (shen.tls V8290) (if (not (shen.key-in-sequent-calculus? X)) (shen.comb (shen.in-> News8152) (macroexpand X)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.key-in-sequent-calculus? (V8291) (or (element? V8291 (cons >> (cons (intern ";") (cons (intern ",") (cons (intern ":") (cons <-- ())))))) (or (shen.sng? V8291) (shen.dbl? V8291))))

(defun shen.<type> (V8292) (let Result (let Parseshen.<expr> (shen.<expr> V8292) (if (shen.parse-failure? Parseshen.<expr>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<expr>) (shen.<-out Parseshen.<expr>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<dbl> (V8293) (let Result (if (shen.non-empty-stream? V8293) (let X (shen.hds V8293) (let News8155 (shen.tls V8293) (if (shen.dbl? X) (shen.comb (shen.in-> News8155) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sng> (V8294) (let Result (if (shen.non-empty-stream? V8294) (let X (shen.hds V8294) (let News8157 (shen.tls V8294) (if (shen.sng? X) (shen.comb (shen.in-> News8157) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.sng? (V8295) (and (symbol? V8295) (shen.sng-h? (str V8295))))

(defun shen.sng-h? (V8298) (cond ((= "___" V8298) true) ((and (shen.+string? V8298) (= "_" (hdstr V8298))) (shen.sng-h? (tlstr V8298))) (true false)))

(defun shen.dbl? (V8299) (and (symbol? V8299) (shen.dbl-h? (str V8299))))

(defun shen.dbl-h? (V8302) (cond ((= "===" V8302) true) ((and (shen.+string? V8302) (= "=" (hdstr V8302))) (shen.dbl-h? (tlstr V8302))) (true false)))

(defun shen.remember-datatype (V8303 V8304) (do (set shen.*datatypes* (shen.assoc-> V8303 V8304 (value shen.*datatypes*))) (do (set shen.*alldatatypes* (shen.assoc-> V8303 V8304 (value shen.*alldatatypes*))) V8303)))

(defun shen.rules->prolog (V8305 V8306) (let Clauses (mapcan (lambda Rule (shen.rule->clause Rule)) V8306) (eval (cons defprolog (cons V8305 Clauses)))))

(defun shen.rule->clause (V8309) (cond ((and (cons? V8309) (and (cons? (tl V8309)) (and (cons? (tl (tl V8309))) (and (cons? (hd (tl (tl V8309)))) (and (cons? (tl (hd (tl (tl V8309))))) (and (= () (tl (tl (hd (tl (tl V8309)))))) (= () (tl (tl (tl V8309)))))))))) (let Constraints (shen.extract-vars V8309) (let HypVs (append (shen.nvars (length (hd (hd (tl (tl V8309)))))) (cons Delta ())) (let Active (shen.extract-vars (hd (tl (hd (tl (tl V8309)))))) (let Head (shen.compile-consequent (hd (tl (hd (tl (tl V8309))))) HypVs) (let Goals (shen.goals Constraints (hd (hd (tl (tl V8309)))) (hd V8309) (hd (tl V8309)) HypVs Active) (append Head (append (cons <-- ()) (append Goals (cons (intern ";") ())))))))))) (true (simple-error "implementation error in shen.rule->clause"))))

(defun shen.compile-consequent (V8316 V8317) (cond ((cons? V8317) (cons (shen.optimise-typing V8316) (cons (hd V8317) ()))) (true (simple-error "implementation error in shen.compile-consequent"))))

(defun shen.nvars (V8318) (cond ((= 0 V8318) ()) (true (cons (gensym V) (shen.nvars (- V8318 1))))))

(defun shen.optimise-typing (V8319) (cond ((and (cons? V8319) (and (cons? (tl V8319)) (and (cons? (tl (tl V8319))) (and (= () (tl (tl (tl V8319)))) (= (hd (tl V8319)) (intern ":")))))) (let Expand (shen.expand-mode-forms (cons - (cons (cons (hd V8319) (cons (hd (tl V8319)) (cons (cons + (tl (tl V8319))) ()))) ()))) (shen.cons-form-with-modes Expand))) (true (let Expand (shen.expand-mode-forms (cons + (cons V8319 ()))) (shen.cons-form-with-modes Expand)))))

(defun shen.expand-mode-forms (V8320) (cond ((and (cons? V8320) (and (= + (hd V8320)) (and (cons? (tl V8320)) (= () (tl (tl V8320)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V8320))) (cons + ())))) ((and (cons? V8320) (and (= - (hd V8320)) (and (cons? (tl V8320)) (= () (tl (tl V8320)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V8320))) (cons - ())))) ((cons? V8320) (map (lambda Z (shen.expand-mode-forms Z)) V8320)) (true V8320)))

(defun shen.cons-form-with-modes (V8321) (cond ((and (cons? V8321) (and (= mode (hd V8321)) (and (cons? (tl V8321)) (and (cons? (tl (tl V8321))) (= () (tl (tl (tl V8321)))))))) (cons (hd (tl (tl V8321))) (cons (shen.cons-form-with-modes (hd (tl V8321))) ()))) ((and (cons? V8321) (and (= bar! (hd V8321)) (and (cons? (tl V8321)) (= () (tl (tl V8321)))))) (hd (tl V8321))) ((cons? V8321) (cons cons (cons (shen.cons-form-with-modes (hd V8321)) (cons (shen.cons-form-with-modes (tl V8321)) ())))) (true V8321)))

(defun shen.goals (V8322 V8323 V8324 V8325 V8326 V8327) (let GoalsAs (shen.compile-assumptions V8323 V8322 V8326 V8327) (let GoalsS (shen.compile-side-conditions V8324) (let GoalsP (shen.compile-premises V8325 V8326) (append GoalsAs (append GoalsS GoalsP))))))

(defun shen.compile-assumptions (V8342 V8343 V8344 V8345) (cond ((= () V8342) ()) ((and (cons? V8342) (and (cons? V8344) (cons? (tl V8344)))) (let NewActive (append (shen.extract-vars (hd V8342)) V8345) (cons (shen.compile-assumption (hd V8342) (hd V8344) (hd (tl V8344)) V8343 V8345) (shen.compile-assumptions (tl V8342) V8343 (tl V8344) NewActive)))) (true (simple-error "implementation error in shen.compile-assumptions"))))

(defun shen.compile-assumption (V8346 V8347 V8348 V8349 V8350) (let F (gensym shen.search) (let Compile (shen.compile-search-procedure F V8346 V8347 V8348 V8349 V8350) (cons F (cons V8347 (cons () (cons V8348 V8349)))))))

(defun shen.compile-search-procedure (V8351 V8352 V8353 V8354 V8355 V8356) (let Past (gensym Previous) (let Base (shen.foundit! V8352 V8353 Past V8354 V8355 V8356) (let Recursive (shen.keep-looking V8351 V8353 Past V8354 V8355) (eval (cons defprolog (cons V8351 (append Base Recursive))))))))

(defun shen.foundit! (V8357 V8358 V8359 V8360 V8361 V8362) (let Passive (shen.passive V8357 V8362) (let Table (shen.tabulate-passive Passive) (let Head (shen.head-foundit! V8357 V8358 V8359 V8360 V8361 Table) (let Body (shen.body-foundit! V8358 V8359 V8360 Table) (append Head (append (cons <-- ()) (append Body (cons (intern ";") ())))))))))

(defun shen.keep-looking (V8363 V8364 V8365 V8366 V8367) (let X (gensym V) (let Head (cons (cons - (cons (cons cons (cons X (cons V8364 ()))) ())) (cons V8365 (cons V8366 V8367))) (let Body (cons (cons V8363 (cons V8364 (cons (cons cons (cons X (cons V8365 ()))) (cons V8366 V8367)))) ()) (append Head (append (cons <-- ()) (append Body (cons (intern ";") ()))))))))

(defun shen.passive (V8372 V8373) (cond ((cons? V8372) (union (shen.passive (hd V8372) V8373) (shen.passive (tl V8372) V8373))) ((shen.passive? V8372 V8373) (cons V8372 ())) (true ())))

(defun shen.passive? (V8374 V8375) (and (not (element? V8374 V8375)) (variable? V8374)))

(defun shen.tabulate-passive (V8376) (map (lambda X (cons X (gensym V))) V8376))

(defun shen.head-foundit! (V8377 V8378 V8379 V8380 V8381 V8382) (let Optimise (shen.optimise-passive V8381 V8382) (cons (cons - (cons (cons cons (cons (shen.optimise-typing V8377) (cons V8378 ()))) ())) (cons V8379 (cons V8380 Optimise)))))

(defun shen.optimise-passive (V8383 V8384) (map (lambda C (shen.optimise-passive-h C V8384)) V8383))

(defun shen.optimise-passive-h (V8385 V8386) (let Entry (assoc V8385 V8386) (if (empty? Entry) V8385 (tl Entry))))

(defun shen.body-foundit! (V8395 V8396 V8397 V8398) (cond ((= () V8398) (cons (cons bind (cons V8397 (cons (cons append (cons (cons 1 (cons V8396 ())) (cons (cons 1 (cons V8395 ())) ()))) ()))) ())) ((and (cons? V8398) (cons? (hd V8398))) (cons (cons bind (cons (tl (hd V8398)) (cons (hd (hd V8398)) ()))) (shen.body-foundit! V8395 V8396 V8397 (tl V8398)))) (true (simple-error "implementation error in shen.body-foundit!"))))

(defun shen.compile-side-conditions (V8399) (map (lambda X (shen.compile-side-condition X)) V8399))

(defun shen.compile-side-condition (V8402) (cond ((and (cons? V8402) (and (= let (hd V8402)) (and (cons? (tl V8402)) (and (cons? (tl (tl V8402))) (= () (tl (tl (tl V8402)))))))) (cons is (tl V8402))) ((and (cons? V8402) (and (= shen.let! (hd V8402)) (and (cons? (tl V8402)) (and (cons? (tl (tl V8402))) (= () (tl (tl (tl V8402)))))))) (cons is! (tl V8402))) ((and (cons? V8402) (and (= if (hd V8402)) (and (cons? (tl V8402)) (= () (tl (tl V8402)))))) (cons when (tl V8402))) (true (simple-error "implementation error in shen.compile-side-condition"))))

(defun shen.compile-premises (V8403 V8404) (let Hyp (hd (reverse V8404)) (map (lambda X (shen.compile-premise X Hyp)) V8403)))

(defun shen.compile-premise (V8411 V8412) (cond ((= ! V8411) !) ((and (cons? V8411) (and (cons? (tl V8411)) (= () (tl (tl V8411))))) (shen.compile-premise-h (reverse (hd V8411)) (hd (tl V8411)) V8412)) (true (simple-error "implementation error in shen.premise"))))

(defun shen.compile-premise-h (V8419 V8420 V8421) (cond ((= () V8419) (cons shen.system-S (cons (shen.cons-form-no-modes V8420) (cons V8421 ())))) ((cons? V8419) (shen.compile-premise-h (tl V8419) V8420 (cons cons (cons (shen.cons-form-no-modes (hd V8419)) (cons V8421 ()))))) (true (simple-error "implementation error in shen.compile-premise-h"))))

(defun shen.cons-form-no-modes (V8422) (cond ((and (cons? V8422) (and (= bar! (hd V8422)) (and (cons? (tl V8422)) (= () (tl (tl V8422)))))) (hd (tl V8422))) ((cons? V8422) (cons cons (cons (shen.cons-form-no-modes (hd V8422)) (cons (shen.cons-form-no-modes (tl V8422)) ())))) (true V8422)))

(defun preclude (V8423) (let InternTypes (map (lambda X (shen.intern-type X)) V8423) (let Datatypes (value shen.*datatypes*) (let Remove (shen.remove-datatypes InternTypes Datatypes) (let NewDatatypes (set shen.*datatypes* Remove) (shen.show-datatypes NewDatatypes))))))

(defun shen.remove-datatypes (V8428 V8429) (cond ((= () V8428) V8429) ((cons? V8428) (shen.remove-datatypes (tl V8428) (shen.unassoc (hd V8428) V8429))) (true (simple-error "implementation error in shen.remove-datatypes"))))

(defun shen.unassoc (V8439 V8440) (cond ((= () V8440) ()) ((and (cons? V8440) (and (cons? (hd V8440)) (= V8439 (hd (hd V8440))))) (tl V8440)) ((cons? V8440) (cons (hd V8440) (shen.unassoc V8439 (tl V8440)))) (true (simple-error "implementation error in shen.unassoc"))))

(defun shen.show-datatypes (V8441) (map (lambda X (hd X)) V8441))

(defun include (V8442) (let InternTypes (map (lambda X (shen.intern-type X)) V8442) (let Remember (map (lambda D (shen.remember-datatype D (fn D))) InternTypes) (let Datatypes (value shen.*datatypes*) (shen.show-datatypes Datatypes)))))

(defun preclude-all-but (V8443) (let Initialise (set shen.*datatypes* ()) (let InternTypes (map (lambda X (shen.intern-type X)) V8443) (let NewDatatypes (map (lambda D (shen.remember-datatype D (fn D))) InternTypes) (shen.show-datatypes (value shen.*datatypes*))))))

(defun include-all-but (V8444) (let InternTypes (map (lambda X (shen.intern-type X)) V8444) (let AllDatatypes (value shen.*alldatatypes*) (let Datatypes (set shen.*datatypes* (shen.remove-datatypes InternTypes AllDatatypes)) (shen.show-datatypes Datatypes)))))

