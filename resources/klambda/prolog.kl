(defun shen.compile-prolog (V7176 V7177) (compile (lambda X (shen.<defprolog> X)) (cons V7176 V7177)))

(defun shen.<defprolog> (V7178) (let Result (if (shen.non-empty-stream? V7178) (let F (shen.hds V7178) (let News6970 (shen.tls V7178) (let Parseshen.<clauses> (shen.<clauses> News6970) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (let Aritycheck (shen.prolog-arity-check F (shen.<-out Parseshen.<clauses>)) (let LeftLinear (map (lambda X (shen.linearise-clause X)) (shen.<-out Parseshen.<clauses>)) (shen.horn-clause-procedure F LeftLinear)))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<clauses> (V7179) (let Result (let Parseshen.<clause> (shen.<clause> V7179) (if (shen.parse-failure? Parseshen.<clause>) (shen.parse-failure) (let Parseshen.<clauses> (shen.<clauses> Parseshen.<clause>) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (cons (shen.<-out Parseshen.<clause>) (shen.<-out Parseshen.<clauses>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V7179) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "Prolog syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.prolog-arity-check (V7184 V7185) (cond ((and (cons? V7185) (= () (tl V7185))) shen.skip) ((and (cons? V7185) (and (cons? (hd V7185)) (and (cons? (tl (hd V7185))) (= () (tl (tl (hd V7185))))))) (shen.pac-h V7184 (length (hd (hd V7185))) (tl V7185))) (true (shen.f-error shen.prolog-arity-check))))

(defun shen.linearise-clause (V7186) (cond ((and (cons? V7186) (and (cons? (tl V7186)) (= () (tl (tl V7186))))) (shen.lch (shen.linearise (@p (hd V7186) (hd (tl V7186)))))) (true (shen.f-error shen.linearise-clause))))

(defun shen.lch (V7187) (cond ((tuple? V7187) (cons (fst V7187) (cons (shen.lchh (snd V7187)) ()))) (true (shen.f-error shen.lch))))

(defun shen.lchh (V7188) (cond ((and (cons? V7188) (and (= where (hd V7188)) (and (cons? (tl V7188)) (and (cons? (hd (tl V7188))) (and (= = (hd (hd (tl V7188)))) (and (cons? (tl (hd (tl V7188)))) (and (cons? (tl (tl (hd (tl V7188))))) (and (= () (tl (tl (tl (hd (tl V7188)))))) (and (cons? (tl (tl V7188))) (= () (tl (tl (tl V7188))))))))))))) (cons (cons (if (value shen.*occurs*) is! is) (tl (hd (tl V7188)))) (shen.lchh (hd (tl (tl V7188)))))) (true V7188)))

(defun shen.pac-h (V7195 V7196 V7197) (cond ((= () V7197) true) ((and (cons? V7197) (cons? (hd V7197))) (if (= V7196 (length (hd (hd V7197)))) (shen.pac-h V7195 V7196 (tl V7197)) (simple-error (cn "arity error in prolog procedure " (shen.app V7195 "
" shen.a))))) (true (shen.f-error shen.pac-h))))

(defun shen.<clause> (V7198) (let Result (let Parseshen.<head> (shen.<head> V7198) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (if (shen.=hd? Parseshen.<head> <--) (let News6973 (shen.tls Parseshen.<head>) (let Parseshen.<body> (shen.<body> News6973) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<body>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<head>) (cons (shen.<-out Parseshen.<body>) ())))))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<head> (V7199) (let Result (let Parseshen.<hterm> (shen.<hterm> V7199) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<head> (shen.<head> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<head>) (cons (shen.<-out Parseshen.<hterm>) (shen.<-out Parseshen.<head>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V7199) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<hterm> (V7200) (let Result (if (shen.non-empty-stream? V7200) (let X (shen.hds V7200) (let News6976 (shen.tls V7200) (if (and (atom? X) (not (shen.prolog-keyword? X))) (shen.comb (shen.in-> News6976) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V7200) (let X (shen.hds V7200) (let News6977 (shen.tls V7200) (if (= X (intern ":")) (shen.comb (shen.in-> News6977) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7200) (let SynCons (shen.comb (shen.hds V7200) (shen.<-out V7200)) (if (shen.=hd? SynCons cons) (let News6978 (shen.tls SynCons) (let Parseshen.<hterm1> (shen.<hterm1> News6978) (if (shen.parse-failure? Parseshen.<hterm1>) (shen.parse-failure) (let Parseshen.<hterm2> (shen.<hterm2> Parseshen.<hterm1>) (if (shen.parse-failure? Parseshen.<hterm2>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm2>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7200)) (cons cons (cons (shen.<-out Parseshen.<hterm1>) (cons (shen.<-out Parseshen.<hterm2>) ()))))))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7200) (let SynCons (shen.comb (shen.hds V7200) (shen.<-out V7200)) (if (shen.=hd? SynCons +) (let News6979 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News6979) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7200)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7200) (let SynCons (shen.comb (shen.hds V7200) (shen.<-out V7200)) (if (shen.=hd? SynCons -) (let News6980 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News6980) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7200)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7200) (let SynCons (shen.comb (shen.hds V7200) (shen.<-out V7200)) (if (shen.=hd? SynCons mode) (let News6981 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News6981) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> +) (let News6982 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News6982) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7200)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7200) (let SynCons (shen.comb (shen.hds V7200) (shen.<-out V7200)) (if (shen.=hd? SynCons mode) (let News6983 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News6983) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> -) (let News6984 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News6984) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7200)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)) Result)) Result)) Result)))

(defun shen.prolog-keyword? (V7201) (element? V7201 (cons (intern ";") (cons <-- ()))))

(defun atom? (V7202) (or (symbol? V7202) (or (string? V7202) (or (boolean? V7202) (or (number? V7202) (empty? V7202))))))

(defun shen.<hterm1> (V7203) (let Result (let Parseshen.<hterm> (shen.<hterm> V7203) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<hterm2> (V7204) (let Result (let Parseshen.<hterm> (shen.<hterm> V7204) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<body> (V7205) (let Result (let Parseshen.<literal> (shen.<literal> V7205) (if (shen.parse-failure? Parseshen.<literal>) (shen.parse-failure) (let Parseshen.<body> (shen.<body> Parseshen.<literal>) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<body>) (cons (shen.<-out Parseshen.<literal>) (shen.<-out Parseshen.<body>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V7205) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<literal> (V7206) (let Result (if (shen.=hd? V7206 !) (let News6989 (shen.tls V7206) (shen.comb (shen.in-> News6989) !)) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7206) (let SynCons (shen.comb (shen.hds V7206) (shen.<-out V7206)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7206)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterms> (V7207) (let Result (let Parseshen.<bterm> (shen.<bterm> V7207) (if (shen.parse-failure? Parseshen.<bterm>) (shen.parse-failure) (let Parseshen.<bterms> (shen.<bterms> Parseshen.<bterm>) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<bterms>) (cons (shen.<-out Parseshen.<bterm>) (shen.<-out Parseshen.<bterms>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V7207) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterm> (V7208) (let Result (let Parseshen.<wildcard> (shen.<wildcard> V7208) (if (shen.parse-failure? Parseshen.<wildcard>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<wildcard>) (shen.<-out Parseshen.<wildcard>)))) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V7208) (let X (shen.hds V7208) (let News6992 (shen.tls V7208) (if (atom? X) (shen.comb (shen.in-> News6992) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7208) (let SynCons (shen.comb (shen.hds V7208) (shen.<-out V7208)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7208)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<wildcard> (V7209) (let Result (if (shen.non-empty-stream? V7209) (let X (shen.hds V7209) (let News6994 (shen.tls V7209) (if (= X _) (shen.comb (shen.in-> News6994) (gensym Y)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sc> (V7210) (let Result (if (shen.non-empty-stream? V7210) (let X (shen.hds V7210) (let News6996 (shen.tls V7210) (if (shen.semicolon? X) (shen.comb (shen.in-> News6996) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.semicolon? (V7211) (= V7211 (intern ";")))

(defun shen.horn-clause-procedure (V7212 V7213) (let Bindings (gensym B) (let Lock (gensym L) (let Key (gensym K) (let Continuation (gensym C) (let Parameters (shen.prolog-parameters V7213) (let HasCut? (shen.hascut? V7213) (let FBody (shen.prolog-fbody V7213 Parameters Bindings Lock Key Continuation HasCut?) (let CutFBody (if HasCut? (cons let (cons Key (cons (cons + (cons Key (cons 1 ()))) (cons FBody ())))) FBody) (let Shen (cons define (cons V7212 (append Parameters (append (cons Bindings (cons Lock (cons Key (cons Continuation (cons -> ()))))) (cons CutFBody ()))))) Shen))))))))))

(defun shen.hascut? (V7216) (cond ((= ! V7216) true) ((cons? V7216) (or (shen.hascut? (hd V7216)) (shen.hascut? (tl V7216)))) (true false)))

(defun shen.prolog-parameters (V7221) (cond ((and (cons? V7221) (cons? (hd V7221))) (shen.parameters (length (hd (hd V7221))))) (true (shen.f-error shen.prolog-parameters))))

(defun shen.prolog-fbody (V7242 V7243 V7244 V7245 V7246 V7247 V7248) (cond ((and (= () V7242) (= true V7248)) (cons shen.unlock (cons V7245 (cons V7246 ())))) ((and (cons? V7242) (and (cons? (hd V7242)) (and (cons? (tl (hd V7242))) (and (= () (tl (tl (hd V7242)))) (and (= () (tl V7242)) (= false V7248)))))) (let Continue (shen.continue (hd (hd V7242)) (hd (tl (hd V7242))) V7244 V7245 V7246 V7247) (cons if (cons (cons shen.unlocked? (cons V7245 ())) (cons (shen.compile-head shen.+m (hd (hd V7242)) V7243 V7244 Continue) (cons false ())))))) ((and (cons? V7242) (and (cons? (hd V7242)) (and (cons? (tl (hd V7242))) (= () (tl (tl (hd V7242))))))) (let Case (gensym C) (let Continue (shen.continue (hd (hd V7242)) (hd (tl (hd V7242))) V7244 V7245 V7246 V7247) (cons let (cons Case (cons (cons if (cons (cons shen.unlocked? (cons V7245 ())) (cons (shen.compile-head shen.+m (hd (hd V7242)) V7243 V7244 Continue) (cons false ())))) (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons (shen.prolog-fbody (tl V7242) V7243 V7244 V7245 V7246 V7247 V7248) (cons Case ())))) ()))))))) (true (simple-error "implementation error in shen.prolog-fbody"))))

(defun shen.unlock (V7249 V7250) (if (and (shen.locked? V7249) (shen.fits? V7250 V7249)) (shen.openlock V7249) false))

(defun shen.locked? (V7251) (not (shen.unlocked? V7251)))

(defun shen.unlocked? (V7252) (<-address V7252 1))

(defun shen.openlock (V7253) (do (address-> V7253 1 true) false))

(defun shen.fits? (V7254 V7255) (= V7254 (<-address V7255 2)))

(defun shen.cut (V7258 V7259 V7260 V7261) (let Compute (thaw V7261) (if (and (= Compute false) (shen.unlocked? V7259)) (shen.lock V7260 V7259) Compute)))

(defun shen.lock (V7262 V7263) (let SetLock (address-> V7263 1 false) (let SetKey (address-> V7263 2 V7262) false)))

(defun shen.continue (V7264 V7265 V7266 V7267 V7268 V7269) (let HVs (shen.extract-vars V7264) (let BVs (shen.extract-free-vars V7265) (let Free (difference BVs HVs) (let ContinuationCode (cons do (cons (cons shen.incinfs ()) (cons (shen.compile-body V7265 V7266 V7267 V7268 V7269) ()))) (shen.stpart Free ContinuationCode V7266))))))

(defun shen.extract-free-vars (V7272) (cond ((and (cons? V7272) (and (= lambda (hd V7272)) (and (cons? (tl V7272)) (and (cons? (tl (tl V7272))) (= () (tl (tl (tl V7272)))))))) (remove (hd (tl V7272)) (shen.extract-free-vars (hd (tl (tl V7272)))))) ((cons? V7272) (union (shen.extract-free-vars (hd V7272)) (shen.extract-free-vars (tl V7272)))) ((variable? V7272) (cons V7272 ())) (true ())))

(defun shen.compile-body (V7289 V7290 V7291 V7292 V7293) (cond ((= () V7289) (cons thaw (cons V7293 ()))) ((and (cons? V7289) (= ! (hd V7289))) (shen.compile-body (cons (cons shen.cut ()) (tl V7289)) V7290 V7291 V7292 V7293)) ((and (cons? V7289) (= () (tl V7289))) (append (shen.deref-calls (hd V7289) V7290) (cons V7290 (cons V7291 (cons V7292 (cons V7293 ())))))) ((cons? V7289) (let P* (shen.deref-calls (hd V7289) V7290) (append P* (cons V7290 (cons V7291 (cons V7292 (cons (shen.freeze-literals (tl V7289) V7290 V7291 V7292 V7293) ()))))))) (true (simple-error "implementation error in shen.compile-fbody"))))

(defun shen.freeze-literals (V7310 V7311 V7312 V7313 V7314) (cond ((= () V7310) V7314) ((and (cons? V7310) (= ! (hd V7310))) (shen.freeze-literals (cons (cons shen.cut ()) (tl V7310)) V7311 V7312 V7313 V7314)) ((cons? V7310) (let P* (shen.deref-calls (hd V7310) V7311) (cons freeze (cons (append P* (cons V7311 (cons V7312 (cons V7313 (cons (shen.freeze-literals (tl V7310) V7311 V7312 V7313 V7314) ()))))) ())))) (true (simple-error "implementation error in shen.freeze-literals"))))

(defun shen.deref-calls (V7319 V7320) (cond ((and (cons? V7319) (= fork (hd V7319))) (cons fork (cons (shen.deref-forked-literals (tl V7319) V7320) ()))) ((cons? V7319) (cons (hd V7319) (map (lambda Y (shen.function-calls Y V7320)) (tl V7319)))) (true (simple-error "implementation error in shen.deref-calls"))))

(defun shen.deref-forked-literals (V7327 V7328) (cond ((= () V7327) ()) ((cons? V7327) (cons cons (cons (shen.deref-calls (hd V7327) V7328) (cons (shen.deref-forked-literals (tl V7327) V7328) ())))) (true (simple-error "fork requires a list of literals
"))))

(defun shen.function-calls (V7331 V7332) (cond ((and (cons? V7331) (and (= cons (hd V7331)) (and (cons? (tl V7331)) (and (cons? (tl (tl V7331))) (= () (tl (tl (tl V7331)))))))) (cons cons (cons (shen.function-calls (hd (tl V7331)) V7332) (cons (shen.function-calls (hd (tl (tl V7331))) V7332) ())))) ((cons? V7331) (shen.deref-terms V7331 V7332 ())) (true V7331)))

(defun shen.deref-terms (V7341 V7342 V7343) (cond ((and (cons? V7341) (and (= 0 (hd V7341)) (and (cons? (tl V7341)) (= () (tl (tl V7341)))))) (if (variable? (hd (tl V7341))) (hd (tl V7341)) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V7341)) "
" shen.s))))) ((and (cons? V7341) (and (= 1 (hd V7341)) (and (cons? (tl V7341)) (= () (tl (tl V7341)))))) (if (variable? (hd (tl V7341))) (cons shen.lazyderef (cons (hd (tl V7341)) (cons V7342 ()))) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V7341)) "
" shen.s))))) ((and (not (element? V7341 V7343)) (variable? V7341)) (cons shen.deref (cons V7341 (cons V7342 ())))) ((and (cons? V7341) (and (= lambda (hd V7341)) (and (cons? (tl V7341)) (and (cons? (tl (tl V7341))) (= () (tl (tl (tl V7341)))))))) (cons lambda (cons (hd (tl V7341)) (cons (shen.deref-terms (hd (tl (tl V7341))) V7342 (cons (hd (tl V7341)) V7343)) ())))) ((cons? V7341) (map (lambda Z (shen.deref-terms Z V7342 V7343)) V7341)) (true V7341)))

(defun shen.compile-head (V7361 V7362 V7363 V7364 V7365) (cond ((and (= () V7362) (= () V7363)) V7365) ((and (cons? V7362) (and (cons? (hd V7362)) (and (= shen.+m (hd (hd V7362))) (and (cons? (tl (hd V7362))) (= () (tl (tl (hd V7362)))))))) (shen.compile-head V7361 (cons shen.+m (cons (hd (tl (hd V7362))) (cons V7361 (tl V7362)))) V7363 V7364 V7365)) ((and (cons? V7362) (and (cons? (hd V7362)) (and (= shen.-m (hd (hd V7362))) (and (cons? (tl (hd V7362))) (= () (tl (tl (hd V7362)))))))) (shen.compile-head V7361 (cons shen.-m (cons (hd (tl (hd V7362))) (cons V7361 (tl V7362)))) V7363 V7364 V7365)) ((and (cons? V7362) (= shen.-m (hd V7362))) (shen.compile-head shen.-m (tl V7362) V7363 V7364 V7365)) ((and (cons? V7362) (= shen.+m (hd V7362))) (shen.compile-head shen.+m (tl V7362) V7363 V7364 V7365)) ((and (cons? V7362) (and (cons? V7363) (shen.wildcard? (hd V7362)))) (shen.compile-head V7361 (tl V7362) (tl V7363) V7364 V7365)) ((and (cons? V7362) (variable? (hd V7362))) (shen.variable-case V7361 V7362 V7363 V7364 V7365)) ((and (= shen.-m V7361) (and (cons? V7362) (atom? (hd V7362)))) (shen.atom-case-minus V7362 V7363 V7364 V7365)) ((and (= shen.-m V7361) (and (cons? V7362) (and (cons? (hd V7362)) (and (= cons (hd (hd V7362))) (and (cons? (tl (hd V7362))) (and (cons? (tl (tl (hd V7362)))) (= () (tl (tl (tl (hd V7362))))))))))) (shen.cons-case-minus V7362 V7363 V7364 V7365)) ((and (= shen.+m V7361) (and (cons? V7362) (atom? (hd V7362)))) (shen.atom-case-plus V7362 V7363 V7364 V7365)) ((and (= shen.+m V7361) (and (cons? V7362) (and (cons? (hd V7362)) (and (= cons (hd (hd V7362))) (and (cons? (tl (hd V7362))) (and (cons? (tl (tl (hd V7362)))) (= () (tl (tl (tl (hd V7362))))))))))) (shen.cons-case-plus V7362 V7363 V7364 V7365)) (true (simple-error "implementation error in shen.compile-head"))))

(defun shen.variable-case (V7376 V7377 V7378 V7379 V7380) (cond ((and (cons? V7377) (cons? V7378)) (if (variable? (hd V7378)) (shen.compile-head V7376 (tl V7377) (tl V7378) V7379 (subst (hd V7378) (hd V7377) V7380)) (cons let (cons (hd V7377) (cons (hd V7378) (cons (shen.compile-head V7376 (tl V7377) (tl V7378) V7379 V7380) ())))))) (true (simple-error "implementation error in shen.variable-case"))))

(defun shen.atom-case-minus (V7389 V7390 V7391 V7392) (cond ((and (cons? V7389) (cons? V7390)) (let Tm (gensym Tm) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7390) (cons V7391 ()))) (cons (cons if (cons (cons = (cons Tm (cons (hd V7389) ()))) (cons (shen.compile-head shen.-m (tl V7389) (tl V7390) V7391 V7392) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.atom-case-minus"))))

(defun shen.cons-case-minus (V7401 V7402 V7403 V7404) (cond ((and (cons? V7401) (and (cons? (hd V7401)) (and (= cons (hd (hd V7401))) (and (cons? (tl (hd V7401))) (and (cons? (tl (tl (hd V7401)))) (and (= () (tl (tl (tl (hd V7401))))) (cons? V7402))))))) (let Tm (gensym Tm) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7402) (cons V7403 ()))) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.-m (cons (hd (tl (hd V7401))) (cons (hd (tl (tl (hd V7401)))) (tl V7401))) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) (tl V7402))) V7403 V7404) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.cons-case-minus"))))

(defun shen.atom-case-plus (V7413 V7414 V7415 V7416) (cond ((and (cons? V7413) (cons? V7414)) (let Tm (gensym Tm) (let GoTo (gensym GoTo) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7414) (cons V7415 ()))) (cons GoTo (cons (cons freeze (cons (shen.compile-head shen.+m (tl V7413) (tl V7414) V7415 V7416) ())) (cons (cons if (cons (cons = (cons Tm (cons (hd V7413) ()))) (cons (cons thaw (cons GoTo ())) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (cons shen.bind! (cons Tm (cons (shen.demode (hd V7413)) (cons V7415 (cons GoTo ()))))) (cons false ())))) ())))) ()))))))))) (true (simple-error "implementation error in shen.atom-case-plus"))))

(defun shen.cons-case-plus (V7425 V7426 V7427 V7428) (cond ((and (cons? V7425) (and (cons? (hd V7425)) (and (= cons (hd (hd V7425))) (and (cons? (tl (hd V7425))) (and (cons? (tl (tl (hd V7425)))) (and (= () (tl (tl (tl (hd V7425))))) (cons? V7426))))))) (let Tm (gensym Tm) (let GoTo (gensym GoTo) (let Vars (shen.extract-vars (cons (hd (tl (hd V7425))) (hd (tl (tl (hd V7425)))))) (let Tame (shen.tame (hd V7425)) (let TVars (shen.extract-vars Tame) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7426) (cons V7427 ()))) (cons GoTo (cons (shen.goto Vars (shen.compile-head shen.+m (tl V7425) (tl V7426) V7427 V7428)) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.+m (tl (hd V7425)) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) ())) V7427 (shen.invoke GoTo Vars)) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (shen.stpart TVars (cons shen.bind! (cons Tm (cons (shen.demode Tame) (cons V7427 (cons (cons freeze (cons (shen.invoke GoTo Vars) ())) ()))))) V7427) (cons false ())))) ())))) ())))))))))))) (true (simple-error "implementation error in shen.cons-case-plus"))))

(defun shen.demode (V7429) (cond ((and (cons? V7429) (and (= shen.+m (hd V7429)) (and (cons? (tl V7429)) (= () (tl (tl V7429)))))) (shen.demode (hd (tl V7429)))) ((and (cons? V7429) (and (= shen.-m (hd V7429)) (and (cons? (tl V7429)) (= () (tl (tl V7429)))))) (shen.demode (hd (tl V7429)))) ((cons? V7429) (map (lambda Z (shen.demode Z)) V7429)) (true V7429)))

(defun shen.tame (V7430) (cond ((shen.wildcard? V7430) (gensym Y)) ((cons? V7430) (map (lambda Z (shen.tame Z)) V7430)) (true V7430)))

(defun shen.goto (V7431 V7432) (cond ((= () V7431) (cons freeze (cons V7432 ()))) (true (shen.goto-h V7431 V7432))))

(defun shen.goto-h (V7433 V7434) (cond ((= () V7433) V7434) ((cons? V7433) (cons lambda (cons (hd V7433) (cons (shen.goto-h (tl V7433) V7434) ())))) (true (shen.f-error shen.goto-h))))

(defun shen.invoke (V7435 V7436) (cond ((= () V7436) (cons thaw (cons V7435 ()))) (true (cons V7435 V7436))))

(defun shen.wildcard? (V7437) (= V7437 _))

(defun shen.pvar? (V7438) (trap-error (and (absvector? V7438) (= (<-address V7438 0) shen.pvar)) (lambda E false)))

(defun shen.lazyderef (V7439 V7440) (if (shen.pvar? V7439) (let Value (<-address V7440 (<-address V7439 1)) (if (= Value shen.-null-) V7439 (shen.lazyderef Value V7440))) V7439))

(defun shen.deref (V7441 V7442) (cond ((cons? V7441) (cons (shen.deref (hd V7441) V7442) (shen.deref (tl V7441) V7442))) (true (if (shen.pvar? V7441) (let Value (<-address V7442 (<-address V7441 1)) (if (= Value shen.-null-) V7441 (shen.deref Value V7442))) V7441))))

(defun shen.bind! (V7443 V7444 V7445 V7446) (let Bind (shen.bindv V7443 V7444 V7445) (let Compute (thaw V7446) (if (= Compute false) (shen.unwind V7443 V7445 Compute) Compute))))

(defun shen.bindv (V7447 V7448 V7449) (address-> V7449 (<-address V7447 1) V7448))

(defun shen.unwind (V7450 V7451 V7452) (do (address-> V7451 (<-address V7450 1) shen.-null-) V7452))

(defun shen.stpart (V7461 V7462 V7463) (cond ((= () V7461) V7462) ((cons? V7461) (cons let (cons (hd V7461) (cons (cons shen.newpv (cons V7463 ())) (cons (cons shen.gc (cons V7463 (cons (shen.stpart (tl V7461) V7462 V7463) ()))) ()))))) (true (simple-error "implementation error in shen.stpart"))))

(defun shen.gc (V7464 V7465) (if (= V7465 false) (let N (shen.ticket-number V7464) (do (shen.decrement-ticket N V7464) V7465)) V7465))

(defun shen.decrement-ticket (V7466 V7467) (address-> V7467 1 (- V7466 1)))

(defun shen.newpv (V7468) (let N (shen.ticket-number V7468) (let NewBindings (shen.make-prolog-variable N) (let NextTicket (shen.nextticket V7468 N) NewBindings))))

(defun shen.ticket-number (V7469) (<-address V7469 1))

(defun shen.nextticket (V7470 V7471) (let NewVector (address-> V7470 V7471 shen.-null-) (address-> NewVector 1 (+ V7471 1))))

(defun shen.make-prolog-variable (V7472) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V7472))

(defun shen.pvar (V7473) (cn "Var" (shen.app (<-address V7473 1) "" shen.a)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.prolog-vector-size (V7474) (if (and (integer? V7474) (> V7474 0)) (set shen.*size-prolog-vector* V7474) (simple-error (cn "prolog vector size: size should be a positive integer; not " (shen.app V7474 "" shen.a)))))

(defun shen.lzy=! (V7486 V7487 V7488 V7489) (cond ((= V7486 V7487) (thaw V7489)) ((and (shen.pvar? V7486) (not (shen.occurs? V7486 (shen.deref V7487 V7488)))) (shen.bind! V7486 V7487 V7488 V7489)) ((and (shen.pvar? V7487) (not (shen.occurs? V7487 (shen.deref V7486 V7488)))) (shen.bind! V7487 V7486 V7488 V7489)) ((and (cons? V7486) (cons? V7487)) (shen.lzy=! (shen.lazyderef (hd V7486) V7488) (shen.lazyderef (hd V7487) V7488) V7488 (freeze (shen.lzy=! (shen.lazyderef (tl V7486) V7488) (shen.lazyderef (tl V7487) V7488) V7488 V7489)))) (true false)))

(defun shen.lzy= (V7501 V7502 V7503 V7504) (cond ((= V7501 V7502) (thaw V7504)) ((shen.pvar? V7501) (shen.bind! V7501 V7502 V7503 V7504)) ((shen.pvar? V7502) (shen.bind! V7502 V7501 V7503 V7504)) ((and (cons? V7501) (cons? V7502)) (shen.lzy= (shen.lazyderef (hd V7501) V7503) (shen.lazyderef (hd V7502) V7503) V7503 (freeze (shen.lzy= (shen.lazyderef (tl V7501) V7503) (shen.lazyderef (tl V7502) V7503) V7503 V7504)))) (true false)))

(defun shen.occurs? (V7510 V7511) (cond ((= V7510 V7511) true) ((cons? V7511) (or (shen.occurs? V7510 (hd V7511)) (shen.occurs? V7510 (tl V7511)))) (true false)))

(defun call (V7512 V7513 V7514 V7515 V7516) ((((V7512 V7513) V7514) V7515) V7516))

(defun return (V7523 V7524 V7525 V7526 V7527) (shen.deref V7523 V7524))

(defun when (V7534 V7535 V7536 V7537 V7538) (if V7534 (thaw V7538) false))

(defun is (V7539 V7540 V7541 V7542 V7543 V7544) (shen.lzy= (shen.lazyderef V7539 V7541) (shen.lazyderef V7540 V7541) V7541 V7544))

(defun is! (V7545 V7546 V7547 V7548 V7549 V7550) (shen.lzy=! (shen.lazyderef V7545 V7547) (shen.lazyderef V7546 V7547) V7547 V7550))

(defun bind (V7555 V7556 V7557 V7558 V7559 V7560) (shen.bind! V7555 V7556 V7557 V7560))

(defun var? (V7561 V7562 V7563 V7564 V7565) (if (shen.pvar? (shen.lazyderef V7561 V7562)) (thaw V7565) false))

(defun shen.print-prolog-vector (V7568) "|prolog vector|")

(defun fork (V7587 V7588 V7589 V7590 V7591) (cond ((= () V7587) false) ((cons? V7587) (let Case (((((hd V7587) V7588) V7589) V7590) V7591) (if (= Case false) (fork (tl V7587) V7588 V7589 V7590 V7591) Case))) (true (simple-error "fork expects a list of literals
"))))

(defun findall (V7592 V7593 V7594 V7595 V7596 V7597 V7598) (if (shen.unlocked? V7596) (let Store (shen.newpv V7595) (shen.gc V7595 (do (shen.incinfs) (is Store () V7595 V7596 V7597 (freeze (shen.findall-h V7592 V7593 V7594 Store V7595 V7596 V7597 V7598)))))) false))

(defun shen.findall-h (V7599 V7600 V7601 V7602 V7603 V7604 V7605 V7606) (let C7013 (if (shen.unlocked? V7604) (do (shen.incinfs) (call V7600 V7603 V7604 V7605 (freeze (shen.overbind V7599 V7602 V7603 V7604 V7605 V7606)))) false) (if (= C7013 false) (if (shen.unlocked? V7604) (do (shen.incinfs) (is! V7601 V7602 V7603 V7604 V7605 V7606)) false) C7013)))

(defun shen.overbind (V7613 V7614 V7615 V7616 V7617 V7618) (do (shen.bindv V7614 (cons (shen.deref V7613 V7615) (shen.lazyderef V7614 V7615)) V7615) false))

(defun occurs-check (V7621) (cond ((= + V7621) (set shen.*occurs* true)) ((= - V7621) (set shen.*occurs* false)) (true (simple-error "occurs-check expects a + or a -.
"))))

