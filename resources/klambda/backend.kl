(defun cl.kl-to-lisp (V9966) (cl.kl-to-lisp-h () V9966))

(defun cl.kl-to-lisp-h (V9974 V9975) (cond ((= T (MEMBER V9975 V9974)) V9975) ((and (cons? V9975) (and (= type (hd V9975)) (and (cons? (tl V9975)) (and (cons? (tl (tl V9975))) (= () (tl (tl (tl V9975)))))))) (cl.kl-to-lisp-h V9974 (hd (tl V9975)))) ((and (cons? V9975) (and (= protect (hd V9975)) (and (cons? (tl V9975)) (= () (tl (tl V9975)))))) (cl.kl-to-lisp-h V9974 (hd (tl V9975)))) ((and (cons? V9975) (and (= lambda (hd V9975)) (and (cons? (tl V9975)) (and (cons? (tl (tl V9975))) (and (= () (tl (tl (tl V9975)))) (= (hd (tl V9975)) T)))))) (cl.kl-to-lisp-h V9974 (cl.rectify-t V9975))) ((and (cons? V9975) (and (= lambda (hd V9975)) (and (cons? (tl V9975)) (and (cons? (tl (tl V9975))) (= () (tl (tl (tl V9975)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V9975)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V9975)) V9974) (hd (tl (tl V9975)))) ()))) ()))) ((and (cons? V9975) (and (= let (hd V9975)) (and (cons? (tl V9975)) (and (cons? (tl (tl V9975))) (and (cons? (tl (tl (tl V9975)))) (and (= () (tl (tl (tl (tl V9975))))) (= (hd (tl V9975)) T))))))) (cl.kl-to-lisp-h V9974 (cl.rectify-t V9975))) ((and (cons? V9975) (and (= let (hd V9975)) (and (cons? (tl V9975)) (and (cons? (tl (tl V9975))) (and (cons? (tl (tl (tl V9975)))) (= () (tl (tl (tl (tl V9975)))))))))) (cons LET (cons (cons (cons (hd (tl V9975)) (cons (cl.kl-to-lisp-h V9974 (hd (tl (tl V9975)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V9975)) V9974) (hd (tl (tl (tl V9975))))) ())))) ((and (cons? V9975) (and (= defun (hd V9975)) (and (cons? (tl V9975)) (and (cons? (tl (tl V9975))) (and (cons? (tl (tl (tl V9975)))) (= () (tl (tl (tl (tl V9975)))))))))) (cons DEFUN (cons (hd (tl V9975)) (cons (hd (tl (tl V9975))) (cons (cl.kl-to-lisp-h (hd (tl (tl V9975))) (hd (tl (tl (tl V9975))))) ()))))) ((and (cons? V9975) (= cond (hd V9975))) (cons COND (CL.MAPCAR (lambda C (cl.cond-code V9974 C)) (tl V9975)))) ((and (cons? V9975) (or (= T (MEMBER (hd V9975) V9974)) (cons? (hd V9975)))) (let Lisp (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V9974 Y)) V9975) (cl.currylisp Lisp))) ((and (cons? V9975) (cl.fastsymbol? (hd V9975))) (let LispX (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V9974 Y)) (tl V9975)) (let LispF (cl.maplispsym (hd V9975)) (cl.optimise-application (cons LispF LispX))))) ((or (number? V9975) (or (string? V9975) (empty? V9975))) V9975) (true (cons QUOTE (cons V9975 ())))))

(defun cl.rectify-t (V9976) (SUBST (GENSYM "x") T V9976))

(defun cl.currylisp (V9977) (cond ((and (cons? V9977) (and (cons? (tl V9977)) (cons? (tl (tl V9977))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V9977) (cons (hd (tl V9977)) ()))) (tl (tl V9977))))) ((and (cons? V9977) (and (cons? (tl V9977)) (= () (tl (tl V9977))))) (cons FUNCALL V9977)) ((and (cons? V9977) (= () (tl V9977))) (cons FUNCALL V9977)) (true V9977)))

(defun cl.optimise-application (V9978) (cond ((and (cons? V9978) (and (= protect (hd V9978)) (and (cons? (tl V9978)) (= () (tl (tl V9978)))))) (cl.optimise-application (hd (tl V9978)))) ((and (cons? V9978) (and (= hd (hd V9978)) (and (cons? (tl V9978)) (= () (tl (tl V9978)))))) (cons CAR (cons (cl.optimise-application (hd (tl V9978))) ()))) ((and (cons? V9978) (and (= tl (hd V9978)) (and (cons? (tl V9978)) (= () (tl (tl V9978)))))) (cons CDR (cons (cl.optimise-application (hd (tl V9978))) ()))) ((and (cons? V9978) (and (= cons (hd V9978)) (and (cons? (tl V9978)) (and (cons? (tl (tl V9978))) (= () (tl (tl (tl V9978)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V9978))) (cons (cl.optimise-application (hd (tl (tl V9978)))) ())))) ((and (cons? V9978) (and (= append (hd V9978)) (and (cons? (tl V9978)) (and (cons? (tl (tl V9978))) (= () (tl (tl (tl V9978)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V9978))) (cons (cl.optimise-application (hd (tl (tl V9978)))) ())))) ((and (cons? V9978) (and (= reverse (hd V9978)) (and (cons? (tl V9978)) (= () (tl (tl V9978)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V9978))) ()))) ((and (cons? V9978) (and (= length (hd V9978)) (and (cons? (tl V9978)) (= () (tl (tl V9978)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V9978))) ()))) ((and (cons? V9978) (and (= if (hd V9978)) (and (cons? (tl V9978)) (and (cons? (tl (tl V9978))) (and (cons? (tl (tl (tl V9978)))) (= () (tl (tl (tl (tl V9978)))))))))) (cons IF (cons (cl.wrap (hd (tl V9978))) (cons (cl.optimise-application (hd (tl (tl V9978)))) (cons (cl.optimise-application (hd (tl (tl (tl V9978))))) ()))))) ((and (cons? V9978) (and (= value (hd V9978)) (and (cons? (tl V9978)) (and (cons? (hd (tl V9978))) (and (cons? (tl (hd (tl V9978)))) (and (= () (tl (tl (hd (tl V9978))))) (and (= () (tl (tl V9978))) (= (hd (hd (tl V9978))) QUOTE)))))))) (hd (tl (hd (tl V9978))))) ((and (cons? V9978) (and (= map (hd V9978)) (and (cons? (tl V9978)) (and (cons? (tl (tl V9978))) (= () (tl (tl (tl V9978)))))))) (cons CL.MAPCAR (tl V9978))) ((and (cons? V9978) (and (= + (hd V9978)) (and (cons? (tl V9978)) (and (= 1 (hd (tl V9978))) (and (cons? (tl (tl V9978))) (= () (tl (tl (tl V9978))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V9978)))) ()))) ((and (cons? V9978) (and (= + (hd V9978)) (and (cons? (tl V9978)) (and (cons? (tl (tl V9978))) (and (= 1 (hd (tl (tl V9978)))) (= () (tl (tl (tl V9978))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V9978))) ()))) ((and (cons? V9978) (and (= - (hd V9978)) (and (cons? (tl V9978)) (and (cons? (tl (tl V9978))) (and (= 1 (hd (tl (tl V9978)))) (= () (tl (tl (tl V9978))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V9978))) ()))) ((cons? V9978) (CL.MAPCAR (lambda Z (cl.optimise-application Z)) V9978)) (true V9978)))

(defun cl.cond-code (V9983 V9984) (cond ((and (cons? V9984) (and (cons? (tl V9984)) (= () (tl (tl V9984))))) (let LispTest (cl.wrap (cl.kl-to-lisp-h V9983 (hd V9984))) (let LispResult (cl.kl-to-lisp-h V9983 (hd (tl V9984))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V9985) (cond ((and (cons? V9985) (and (cons? (tl V9985)) (and (= true (hd (tl V9985))) (and (= () (tl (tl V9985))) (= (hd V9985) QUOTE))))) T) ((and (cons? V9985) (and (= cons? (hd V9985)) (and (cons? (tl V9985)) (= () (tl (tl V9985)))))) (cons CONSP (tl V9985))) ((and (cons? V9985) (and (= string? (hd V9985)) (and (cons? (tl V9985)) (= () (tl (tl V9985)))))) (cons STRINGP (tl V9985))) ((and (cons? V9985) (and (= number? (hd V9985)) (and (cons? (tl V9985)) (= () (tl (tl V9985)))))) (cons NUMBERP (tl V9985))) ((and (cons? V9985) (and (= empty? (hd V9985)) (and (cons? (tl V9985)) (= () (tl (tl V9985)))))) (cons NULL (tl V9985))) ((and (cons? V9985) (and (= and (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons AND (cons (cl.wrap (hd (tl V9985))) (cons (cl.wrap (hd (tl (tl V9985)))) ())))) ((and (cons? V9985) (and (= or (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons OR (cons (cl.wrap (hd (tl V9985))) (cons (cl.wrap (hd (tl (tl V9985)))) ())))) ((and (cons? V9985) (and (= not (hd V9985)) (and (cons? (tl V9985)) (= () (tl (tl V9985)))))) (cons NOT (cons (cl.wrap (hd (tl V9985))) ()))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (= () (hd (tl (tl V9985)))) (= () (tl (tl (tl V9985))))))))) (cons NULL (cons (hd (tl V9985)) ()))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (= () (hd (tl V9985))) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985))))))))) (cons NULL (tl (tl V9985)))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (cons? (hd (tl (tl V9985)))) (and (cons? (tl (hd (tl (tl V9985))))) (and (= () (tl (tl (hd (tl (tl V9985)))))) (and (= () (tl (tl (tl V9985)))) (and (= (hd (hd (tl (tl V9985)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V9985))))))))))))))) (cons EQ (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (hd (tl V9985))) (and (cons? (tl (hd (tl V9985)))) (and (= () (tl (tl (hd (tl V9985))))) (and (cons? (tl (tl V9985))) (and (= () (tl (tl (tl V9985)))) (and (= (hd (hd (tl V9985))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V9985)))))))))))))) (cons EQ (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (hd (tl V9985))) (and (= fail (hd (hd (tl V9985)))) (and (= () (tl (hd (tl V9985)))) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985))))))))))) (cons EQ (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (cons? (hd (tl (tl V9985)))) (and (= fail (hd (hd (tl (tl V9985))))) (and (= () (tl (hd (tl (tl V9985))))) (= () (tl (tl (tl V9985))))))))))) (cons EQ (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (= () (tl (tl (tl V9985)))) (string? (hd (tl V9985)))))))) (cons EQUAL (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (= () (tl (tl (tl V9985)))) (string? (hd (tl (tl V9985))))))))) (cons EQUAL (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (= () (tl (tl (tl V9985)))) (number? (hd (tl V9985)))))))) (cons EQUALP (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (and (= () (tl (tl (tl V9985)))) (number? (hd (tl (tl V9985))))))))) (cons EQUALP (tl V9985))) ((and (cons? V9985) (and (= cl.equal? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons cl.ABSEQUAL (tl V9985))) ((and (cons? V9985) (and (= cl.greater? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons > (tl V9985))) ((and (cons? V9985) (and (= cl.greater-than-or-equal-to? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons >= (tl V9985))) ((and (cons? V9985) (and (= cl.less? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons < (tl V9985))) ((and (cons? V9985) (and (= cl.less-than-or-equal-to? (hd V9985)) (and (cons? (tl V9985)) (and (cons? (tl (tl V9985))) (= () (tl (tl (tl V9985)))))))) (cons <= (tl V9985))) (true (cons cl.wrapper (cons V9985 ())))))

(defun cl.fastsymbol? (V9992) (cond ((cons? V9992) false) ((= () V9992) false) ((string? V9992) false) ((number? V9992) false) (true true)))

(defun cl.wrapper (V9993) (cond ((= true V9993) T) ((= false V9993) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V9994) (cond ((= = V9994) cl.equal?) ((= > V9994) cl.greater?) ((= < V9994) cl.less?) ((= >= V9994) cl.greater-than-or-equal-to?) ((= <= V9994) cl.less-than-or-equal-to?) ((= + V9994) cl.add) ((= - V9994) cl.subtract) ((= / V9994) cl.divide) ((= * V9994) cl.multiply) (true V9994)))

