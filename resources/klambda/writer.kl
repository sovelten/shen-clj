(defun print (V9862) (let String (shen.insert V9862 "~S") (let Print (pr String (stoutput)) V9862)))

(defun pr (V9863 V9864) (if (value *hush*) V9863 (if (shen.char-stoutput? V9864) (shen.write-string V9863 V9864) (shen.write-chars V9863 V9864 (shen.string->byte V9863 0) 1))))

(defun shen.string->byte (V9865 V9866) (trap-error (string->n (pos V9865 V9866)) (lambda E shen.eos)))

(defun shen.write-chars (V9867 V9868 V9869 V9870) (cond ((= shen.eos V9869) V9867) (true (shen.write-chars V9867 V9868 (do (write-byte V9869 V9868) (shen.string->byte V9867 V9870)) (+ V9870 1)))))

(defun shen.mkstr (V9871 V9872) (cond ((string? V9871) (shen.mkstr-l (shen.proc-nl V9871) V9872)) (true (shen.mkstr-r (cons shen.proc-nl (cons V9871 ())) V9872))))

(defun shen.mkstr-l (V9877 V9878) (cond ((= () V9878) V9877) ((cons? V9878) (shen.mkstr-l (shen.insert-l (hd V9878) V9877) (tl V9878))) (true (simple-error "implementation error in shen.mkstr-l"))))

(defun shen.insert-l (V9885 V9886) (cond ((= "" V9886) "") ((and (shen.+string? V9886) (and (= "~" (hdstr V9886)) (and (shen.+string? (tlstr V9886)) (= "A" (hdstr (tlstr V9886)))))) (cons shen.app (cons V9885 (cons (tlstr (tlstr V9886)) (cons shen.a ()))))) ((and (shen.+string? V9886) (and (= "~" (hdstr V9886)) (and (shen.+string? (tlstr V9886)) (= "R" (hdstr (tlstr V9886)))))) (cons shen.app (cons V9885 (cons (tlstr (tlstr V9886)) (cons shen.r ()))))) ((and (shen.+string? V9886) (and (= "~" (hdstr V9886)) (and (shen.+string? (tlstr V9886)) (= "S" (hdstr (tlstr V9886)))))) (cons shen.app (cons V9885 (cons (tlstr (tlstr V9886)) (cons shen.s ()))))) ((shen.+string? V9886) (shen.factor-cn (cons cn (cons (hdstr V9886) (cons (shen.insert-l V9885 (tlstr V9886)) ()))))) ((and (cons? V9886) (and (= cn (hd V9886)) (and (cons? (tl V9886)) (and (cons? (tl (tl V9886))) (= () (tl (tl (tl V9886)))))))) (cons cn (cons (hd (tl V9886)) (cons (shen.insert-l V9885 (hd (tl (tl V9886)))) ())))) ((and (cons? V9886) (and (= shen.app (hd V9886)) (and (cons? (tl V9886)) (and (cons? (tl (tl V9886))) (and (cons? (tl (tl (tl V9886)))) (= () (tl (tl (tl (tl V9886)))))))))) (cons shen.app (cons (hd (tl V9886)) (cons (shen.insert-l V9885 (hd (tl (tl V9886)))) (tl (tl (tl V9886))))))) (true (simple-error "implementation error in shen.insert-l"))))

(defun shen.factor-cn (V9887) (cond ((and (cons? V9887) (and (= cn (hd V9887)) (and (cons? (tl V9887)) (and (cons? (tl (tl V9887))) (and (cons? (hd (tl (tl V9887)))) (and (= cn (hd (hd (tl (tl V9887))))) (and (cons? (tl (hd (tl (tl V9887))))) (and (cons? (tl (tl (hd (tl (tl V9887)))))) (and (= () (tl (tl (tl (hd (tl (tl V9887))))))) (and (= () (tl (tl (tl V9887)))) (and (string? (hd (tl V9887))) (string? (hd (tl (hd (tl (tl V9887))))))))))))))))) (cons cn (cons (cn (hd (tl V9887)) (hd (tl (hd (tl (tl V9887)))))) (tl (tl (hd (tl (tl V9887)))))))) (true V9887)))

(defun shen.proc-nl (V9890) (cond ((= "" V9890) "") ((and (shen.+string? V9890) (and (= "~" (hdstr V9890)) (and (shen.+string? (tlstr V9890)) (= "%" (hdstr (tlstr V9890)))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V9890))))) ((shen.+string? V9890) (cn (hdstr V9890) (shen.proc-nl (tlstr V9890)))) (true (simple-error "implementation error in shen.proc-nl"))))

(defun shen.mkstr-r (V9895 V9896) (cond ((= () V9896) V9895) ((cons? V9896) (shen.mkstr-r (cons shen.insert (cons (hd V9896) (cons V9895 ()))) (tl V9896))) (true (simple-error "implementation error in shen.mkstr-r"))))

(defun shen.insert (V9897 V9898) (shen.insert-h V9897 V9898 ""))

(defun shen.insert-h (V9907 V9908 V9909) (cond ((= "" V9908) V9909) ((and (shen.+string? V9908) (and (= "~" (hdstr V9908)) (and (shen.+string? (tlstr V9908)) (= "A" (hdstr (tlstr V9908)))))) (cn V9909 (shen.app V9907 (tlstr (tlstr V9908)) shen.a))) ((and (shen.+string? V9908) (and (= "~" (hdstr V9908)) (and (shen.+string? (tlstr V9908)) (= "R" (hdstr (tlstr V9908)))))) (cn V9909 (shen.app V9907 (tlstr (tlstr V9908)) shen.r))) ((and (shen.+string? V9908) (and (= "~" (hdstr V9908)) (and (shen.+string? (tlstr V9908)) (= "S" (hdstr (tlstr V9908)))))) (cn V9909 (shen.app V9907 (tlstr (tlstr V9908)) shen.s))) ((shen.+string? V9908) (shen.insert-h V9907 (tlstr V9908) (cn V9909 (hdstr V9908)))) (true (simple-error "implementation error in shen.insert-h"))))

(defun shen.app (V9910 V9911 V9912) (cn (shen.arg->str V9910 V9912) V9911))

(defun shen.arg->str (V9916 V9917) (cond ((= V9916 (fail)) "...") ((shen.list? V9916) (shen.list->str V9916 V9917)) ((string? V9916) (shen.str->str V9916 V9917)) ((absvector? V9916) (shen.vector->str V9916 V9917)) (true (shen.atom->str V9916))))

(defun shen.list->str (V9918 V9919) (cond ((= shen.r V9919) (@s "(" (@s (shen.iter-list V9918 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V9918 V9919 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V9930 V9931 V9932) (cond ((= () V9930) "") ((= 0 V9932) "... etc") ((and (cons? V9930) (= () (tl V9930))) (shen.arg->str (hd V9930) V9931)) ((cons? V9930) (@s (shen.arg->str (hd V9930) V9931) (@s " " (shen.iter-list (tl V9930) V9931 (- V9932 1))))) (true (@s "|" (@s " " (shen.arg->str V9930 V9931))))))

(defun shen.str->str (V9935 V9936) (cond ((= shen.a V9936) V9935) (true (@s (n->string 34) (@s V9935 (n->string 34))))))

(defun shen.vector->str (V9937 V9938) (if (shen.print-vector? V9937) ((fn (<-address V9937 0)) V9937) (if (vector? V9937) (@s "<" (@s (shen.iter-vector V9937 1 V9938 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V9937 0 V9938 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V9939) (let Zero (<-address V9939 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V9940) (not (= (arity V9940) -1)))

(defun shen.tuple (V9941) (cn "(@p " (shen.app (<-address V9941 1) (cn " " (shen.app (<-address V9941 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V9948 V9949 V9950 V9951) (cond ((= 0 V9951) "... etc") (true (let Item (trap-error (<-address V9948 V9949) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V9948 (+ V9949 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V9950) (@s (shen.arg->str Item V9950) (@s " " (shen.iter-vector V9948 (+ V9949 1) V9950 (- V9951 1)))))))))))

(defun shen.atom->str (V9952) (trap-error (str V9952) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V9953) (or (empty? V9953) (cons? V9953)))

