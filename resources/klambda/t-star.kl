(defun shen.typecheck (V9391 V9392) (let Vs (shen.extract-vars V9392) (let A* (shen.rectify-type V9392) (let Curried (shen.curry V9391) (((((lambda V8805 (lambda L8806 (lambda K8807 (lambda C8808 (let Out (shen.newpv V8805) (shen.gc V8805 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref Vs V8805)) (receive (shen.deref A* V8805)) Out V8805 L8806 K8807 (freeze (shen.toplevel-forms (receive (shen.deref Curried V8805)) Out V8805 L8806 K8807 (freeze (return Out V8805 L8806 K8807 C8808)))))))))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V9393 V9394 V9395 V9396 V9397 V9398 V9399) (let C8817 (if (shen.unlocked? V9397) (let Tm8818 (shen.lazyderef V9393 V9396) (if (= Tm8818 ()) (do (shen.incinfs) (is! V9394 V9395 V9396 V9397 V9398 V9399)) false)) false) (if (= C8817 false) (if (shen.unlocked? V9397) (let Tm8819 (shen.lazyderef V9393 V9396) (if (cons? Tm8819) (let V (hd Tm8819) (let Vs (tl Tm8819) (let X (shen.newpv V9396) (shen.gc V9396 (do (shen.incinfs) (shen.insert-prolog-variables Vs (subst (shen.deref X V9396) V V9394) V9395 V9396 V9397 V9398 V9399)))))) false)) false) C8817)))

(defun shen.toplevel-forms (V9400 V9401 V9402 V9403 V9404 V9405) (let K8822 (+ V9404 1) (let C8826 (if (shen.unlocked? V9403) (let Tm8827 (shen.lazyderef V9400 V9402) (if (cons? Tm8827) (let Tm8828 (shen.lazyderef (hd Tm8827) V9402) (if (= Tm8828 define) (let Tm8829 (shen.lazyderef (tl Tm8827) V9402) (if (cons? Tm8829) (let F (hd Tm8829) (let X (tl Tm8829) (do (shen.incinfs) (when (shen.type-theory-enabled?) V9402 V9403 K8822 (freeze (shen.cut V9402 V9403 K8822 (freeze (shen.signal-def (value shen.*spy*) F V9402 V9403 K8822 (freeze (shen.t* (cons define (cons F X)) V9401 V9402 V9403 K8822 V9405)))))))))) false)) false)) false)) false) (if (= C8826 false) (let C8830 (if (shen.unlocked? V9403) (do (shen.incinfs) (shen.system-S (cons V9400 (cons (intern ":") (cons V9401 ()))) () V9402 V9403 K8822 V9405)) false) (if (= C8830 false) (shen.unlock V9403 K8822) C8830)) C8826))))

(defun shen.signal-def (V9406 V9407 V9408 V9409 V9410 V9411) (let C8837 (if (shen.unlocked? V9409) (let Tm8838 (shen.lazyderef V9406 V9408) (if (= Tm8838 false) (do (shen.incinfs) (thaw V9411)) false)) false) (if (= C8837 false) (if (shen.unlocked? V9409) (let Tm8839 (shen.lazyderef V9406 V9408) (if (= Tm8839 true) (let ShowF (shen.newpv V9408) (shen.gc V9408 (do (shen.incinfs) (is ShowF (pr (cn "
typechecking (fn " (shen.app (shen.deref V9407 V9408) ")
" shen.a)) (stoutput)) V9408 V9409 V9410 V9411)))) false)) false) C8837)))

(defun shen.rectify-type (V9412) (shen.demodulate (shen.curry-type V9412)))

(defun shen.demodulate (V9413) (trap-error (let Demod (shen.walk (lambda Y (shen.demod Y)) V9413) (if (= Demod V9413) V9413 (shen.demodulate Demod))) (lambda E V9413)))

(defun shen.curry-type (V9414) (cond ((and (cons? V9414) (and (cons? (tl V9414)) (and (= --> (hd (tl V9414))) (and (cons? (tl (tl V9414))) (and (cons? (tl (tl (tl V9414)))) (= --> (hd (tl (tl (tl V9414)))))))))) (shen.curry-type (cons (hd V9414) (cons --> (cons (tl (tl V9414)) ()))))) ((and (cons? V9414) (and (cons? (tl V9414)) (and (= ==> (hd (tl V9414))) (and (cons? (tl (tl V9414))) (= () (tl (tl (tl V9414)))))))) (shen.curry-type (cons (cons (hd V9414) (cons * (cons A ()))) (cons --> (cons (cons (cons vector (cons boolean ())) (cons --> (cons (cons (hd V9414) (cons * (tl (tl V9414)))) ()))) ()))))) ((and (cons? V9414) (and (cons? (tl V9414)) (and (= * (hd (tl V9414))) (and (cons? (tl (tl V9414))) (and (cons? (tl (tl (tl V9414)))) (= * (hd (tl (tl (tl V9414)))))))))) (shen.curry-type (cons (hd V9414) (cons * (cons (tl (tl V9414)) ()))))) ((cons? V9414) (map (lambda Z (shen.curry-type Z)) V9414)) (true V9414)))

(defun shen.curry (V9415) (cond ((and (cons? V9415) (and (= define (hd V9415)) (cons? (tl V9415)))) V9415) ((and (cons? V9415) (and (= type (hd V9415)) (and (cons? (tl V9415)) (and (cons? (tl (tl V9415))) (= () (tl (tl (tl V9415)))))))) (cons type (cons (shen.curry (hd (tl V9415))) (tl (tl V9415))))) ((and (cons? V9415) (and (= input+ (hd V9415)) (and (cons? (tl V9415)) (and (cons? (tl (tl V9415))) (= () (tl (tl (tl V9415)))))))) (cons input+ (cons (hd (tl V9415)) (cons (shen.curry (hd (tl (tl V9415)))) ())))) ((and (cons? V9415) (shen.special? (hd V9415))) (cons (hd V9415) (map (lambda Y (shen.curry Y)) (tl V9415)))) ((and (cons? V9415) (shen.extraspecial? (hd V9415))) V9415) ((and (cons? V9415) (and (cons? (tl V9415)) (cons? (tl (tl V9415))))) (shen.curry (cons (cons (hd V9415) (cons (hd (tl V9415)) ())) (tl (tl V9415))))) ((and (cons? V9415) (and (cons? (tl V9415)) (= () (tl (tl V9415))))) (cons (shen.curry (hd V9415)) (cons (shen.curry (hd (tl V9415))) ()))) (true V9415)))

(defun shen.special? (V9416) (element? V9416 (value shen.*special*)))

(defun shen.extraspecial? (V9417) (element? V9417 (value shen.*extraspecial*)))

(defun shen.system-S (V9418 V9419 V9420 V9421 V9422 V9423) (let K8842 (+ V9422 1) (let C8846 (if (shen.unlocked? V9421) (do (shen.incinfs) (when (shen.maxinfexceeded?) V9420 V9421 K8842 V9423)) false) (if (= C8846 false) (let C8847 (if (shen.unlocked? V9421) (let Tm8848 (shen.lazyderef V9418 V9420) (if (cons? Tm8848) (let X (hd Tm8848) (let Tm8849 (shen.lazyderef (tl Tm8848) V9420) (if (cons? Tm8849) (let Colon (hd Tm8849) (let Tm8850 (shen.lazyderef (tl Tm8849) V9420) (if (cons? Tm8850) (let A (hd Tm8850) (let Tm8851 (shen.lazyderef (tl Tm8850) V9420) (if (= Tm8851 ()) (do (shen.incinfs) (when (= (shen.deref Colon V9420) (intern ":")) V9420 V9421 K8842 (freeze (when (shen.type-theory-enabled?) V9420 V9421 K8842 (freeze (shen.cut V9420 V9421 K8842 (freeze (shen.system-S-h X A V9419 V9420 V9421 K8842 V9423)))))))) false))) false))) false))) false)) false) (if (= C8847 false) (let C8852 (if (shen.unlocked? V9421) (do (shen.incinfs) (when (value shen.*spy*) V9420 V9421 K8842 (freeze (shen.show V9418 V9419 V9420 V9421 K8842 V9423)))) false) (if (= C8852 false) (let C8853 (if (shen.unlocked? V9421) (do (shen.incinfs) (shen.search-user-datatypes V9418 V9419 (value shen.*datatypes*) V9420 V9421 K8842 V9423)) false) (if (= C8853 false) (shen.unlock V9421 K8842) C8853)) C8852)) C8847)) C8846))))

(defun shen.show (V9430 V9431 V9432 V9433 V9434 V9435) (do (shen.line) (do (shen.show-p (shen.deref V9430 V9432)) (do (nl 2) (do (shen.show-assumptions (shen.deref V9431 V9432) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let Infs (inferences) (pr (cn "____________________________________________________________ " (shen.app Infs (cn " inference" (shen.app (if (= 1 Infs) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V9436) (cond ((and (cons? V9436) (and (cons? (tl V9436)) (and (cons? (tl (tl V9436))) (and (= () (tl (tl (tl V9436)))) (= (hd (tl V9436)) (intern ":")))))) (do (shen.prterm (hd V9436)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V9436))) "" shen.r) (stoutput))))) (true (shen.prterm V9436))))

(defun shen.prterm (V9437) (cond ((and (cons? V9437) (and (= cons (hd V9437)) (and (cons? (tl V9437)) (and (cons? (tl (tl V9437))) (= () (tl (tl (tl V9437)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V9437))) (do (shen.prtl (hd (tl (tl V9437)))) (pr "]" (stoutput)))))) ((cons? V9437) (do (pr "(" (stoutput)) (do (shen.prterm (hd V9437)) (do (map (lambda Y (do (pr " " (stoutput)) (shen.prterm Y))) (tl V9437)) (pr ")" (stoutput)))))) (true (print V9437))))

(defun shen.prtl (V9438) (cond ((= () V9438) "") ((and (cons? V9438) (and (= cons (hd V9438)) (and (cons? (tl V9438)) (and (cons? (tl (tl V9438))) (= () (tl (tl (tl V9438)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V9438))) (shen.prtl (hd (tl (tl V9438))))))) (true (do (pr " | " (stoutput)) (shen.prterm V9438)))))

(defun shen.show-assumptions (V9445 V9446) (cond ((= () V9445) (pr "
> " (stoutput))) ((cons? V9445) (do (pr (shen.app V9446 ". " shen.a) (stoutput)) (do (shen.show-p (hd V9445)) (do (nl 1) (shen.show-assumptions (tl V9445) (+ V9446 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let Byte (read-byte (stinput)) (if (= Byte 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V9447 V9448 V9449 V9450 V9451 V9452 V9453) (let K8857 (+ V9452 1) (let C8862 (if (shen.unlocked? V9451) (do (shen.incinfs) (when (value shen.*spy*) V9450 V9451 K8857 (freeze (shen.show (cons V9447 (cons (intern ":") (cons V9448 ()))) V9449 V9450 V9451 K8857 V9453)))) false) (if (= C8862 false) (let C8863 (if (shen.unlocked? V9451) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V9447 V9450))) V9450 V9451 K8857 (freeze (shen.primitive V9447 V9448 V9450 V9451 K8857 V9453)))) false) (if (= C8863 false) (let C8864 (if (shen.unlocked? V9451) (do (shen.incinfs) (shen.by-hypothesis V9447 V9448 V9449 V9450 V9451 K8857 V9453)) false) (if (= C8864 false) (let C8865 (if (shen.unlocked? V9451) (let Tm8866 (shen.lazyderef V9447 V9450) (if (cons? Tm8866) (let F (hd Tm8866) (let Tm8867 (shen.lazyderef (tl Tm8866) V9450) (if (= Tm8867 ()) (do (shen.incinfs) (shen.lookupsig F (cons --> (cons V9448 ())) V9450 V9451 K8857 V9453)) false))) false)) false) (if (= C8865 false) (let C8868 (if (shen.unlocked? V9451) (let Tm8869 (shen.lazyderef V9447 V9450) (if (cons? Tm8869) (let Tm8870 (shen.lazyderef (hd Tm8869) V9450) (if (= Tm8870 fn) (let Tm8871 (shen.lazyderef (tl Tm8869) V9450) (if (cons? Tm8871) (let F (hd Tm8871) (let Tm8872 (shen.lazyderef (tl Tm8871) V9450) (if (= Tm8872 ()) (do (shen.incinfs) (shen.lookupsig F V9448 V9450 V9451 K8857 V9453)) false))) false)) false)) false)) false) (if (= C8868 false) (let C8873 (if (shen.unlocked? V9451) (let Tm8874 (shen.lazyderef V9447 V9450) (if (cons? Tm8874) (let F (hd Tm8874) (let Tm8875 (shen.lazyderef (tl Tm8874) V9450) (if (cons? Tm8875) (let X (hd Tm8875) (let Tm8876 (shen.lazyderef (tl Tm8875) V9450) (if (= Tm8876 ()) (let B (shen.newpv V9450) (shen.gc V9450 (do (shen.incinfs) (when (not (cons? (shen.lazyderef F V9450))) V9450 V9451 K8857 (freeze (shen.lookupsig F (cons B (cons --> (cons V9448 ()))) V9450 V9451 K8857 (freeze (shen.system-S-h X B V9449 V9450 V9451 K8857 V9453)))))))) false))) false))) false)) false) (if (= C8873 false) (let C8877 (if (shen.unlocked? V9451) (let Tm8878 (shen.lazyderef V9447 V9450) (if (cons? Tm8878) (let F (hd Tm8878) (let Tm8879 (shen.lazyderef (tl Tm8878) V9450) (if (cons? Tm8879) (let X (hd Tm8879) (let Tm8880 (shen.lazyderef (tl Tm8879) V9450) (if (= Tm8880 ()) (let B (shen.newpv V9450) (shen.gc V9450 (do (shen.incinfs) (shen.system-S-h F (cons B (cons --> (cons V9448 ()))) V9449 V9450 V9451 K8857 (freeze (shen.system-S-h X B V9449 V9450 V9451 K8857 V9453)))))) false))) false))) false)) false) (if (= C8877 false) (let C8881 (if (shen.unlocked? V9451) (let Tm8882 (shen.lazyderef V9447 V9450) (if (cons? Tm8882) (let Tm8883 (shen.lazyderef (hd Tm8882) V9450) (if (= Tm8883 cons) (let Tm8884 (shen.lazyderef (tl Tm8882) V9450) (if (cons? Tm8884) (let X (hd Tm8884) (let Tm8885 (shen.lazyderef (tl Tm8884) V9450) (if (cons? Tm8885) (let Y (hd Tm8885) (let Tm8886 (shen.lazyderef (tl Tm8885) V9450) (if (= Tm8886 ()) (let Tm8887 (shen.lazyderef V9448 V9450) (let GoTo8888 (lambda A (do (shen.incinfs) (shen.system-S-h X A V9449 V9450 V9451 K8857 (freeze (shen.system-S-h Y (cons list (cons A ())) V9449 V9450 V9451 K8857 V9453))))) (if (cons? Tm8887) (let Tm8889 (shen.lazyderef (hd Tm8887) V9450) (let GoTo8890 (freeze (let Tm8891 (shen.lazyderef (tl Tm8887) V9450) (let GoTo8892 (lambda A (GoTo8888 A)) (if (cons? Tm8891) (let A (hd Tm8891) (let Tm8893 (shen.lazyderef (tl Tm8891) V9450) (let GoTo8894 (freeze (GoTo8892 A)) (if (= Tm8893 ()) (thaw GoTo8894) (if (shen.pvar? Tm8893) (shen.bind! Tm8893 () V9450 GoTo8894) false))))) (if (shen.pvar? Tm8891) (let A (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8891 (cons A ()) V9450 (freeze (GoTo8892 A))))) false))))) (if (= Tm8889 list) (thaw GoTo8890) (if (shen.pvar? Tm8889) (shen.bind! Tm8889 list V9450 GoTo8890) false)))) (if (shen.pvar? Tm8887) (let A (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8887 (cons list (cons A ())) V9450 (freeze (GoTo8888 A))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8881 false) (let C8895 (if (shen.unlocked? V9451) (let Tm8896 (shen.lazyderef V9447 V9450) (if (cons? Tm8896) (let Tm8897 (shen.lazyderef (hd Tm8896) V9450) (if (= Tm8897 @p) (let Tm8898 (shen.lazyderef (tl Tm8896) V9450) (if (cons? Tm8898) (let X (hd Tm8898) (let Tm8899 (shen.lazyderef (tl Tm8898) V9450) (if (cons? Tm8899) (let Y (hd Tm8899) (let Tm8900 (shen.lazyderef (tl Tm8899) V9450) (if (= Tm8900 ()) (let Tm8901 (shen.lazyderef V9448 V9450) (let GoTo8902 (lambda A (lambda B (do (shen.incinfs) (shen.system-S-h X A V9449 V9450 V9451 K8857 (freeze (shen.system-S-h Y B V9449 V9450 V9451 K8857 V9453)))))) (if (cons? Tm8901) (let A (hd Tm8901) (let Tm8903 (shen.lazyderef (tl Tm8901) V9450) (let GoTo8904 (lambda B ((GoTo8902 A) B)) (if (cons? Tm8903) (let Tm8905 (shen.lazyderef (hd Tm8903) V9450) (let GoTo8906 (freeze (let Tm8907 (shen.lazyderef (tl Tm8903) V9450) (let GoTo8908 (lambda B (GoTo8904 B)) (if (cons? Tm8907) (let B (hd Tm8907) (let Tm8909 (shen.lazyderef (tl Tm8907) V9450) (let GoTo8910 (freeze (GoTo8908 B)) (if (= Tm8909 ()) (thaw GoTo8910) (if (shen.pvar? Tm8909) (shen.bind! Tm8909 () V9450 GoTo8910) false))))) (if (shen.pvar? Tm8907) (let B (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8907 (cons B ()) V9450 (freeze (GoTo8908 B))))) false))))) (if (= Tm8905 *) (thaw GoTo8906) (if (shen.pvar? Tm8905) (shen.bind! Tm8905 * V9450 GoTo8906) false)))) (if (shen.pvar? Tm8903) (let B (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8903 (cons * (cons B ())) V9450 (freeze (GoTo8904 B))))) false))))) (if (shen.pvar? Tm8901) (let A (shen.newpv V9450) (shen.gc V9450 (let B (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8901 (cons A (cons * (cons B ()))) V9450 (freeze ((GoTo8902 A) B))))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8895 false) (let C8911 (if (shen.unlocked? V9451) (let Tm8912 (shen.lazyderef V9447 V9450) (if (cons? Tm8912) (let Tm8913 (shen.lazyderef (hd Tm8912) V9450) (if (= Tm8913 @v) (let Tm8914 (shen.lazyderef (tl Tm8912) V9450) (if (cons? Tm8914) (let X (hd Tm8914) (let Tm8915 (shen.lazyderef (tl Tm8914) V9450) (if (cons? Tm8915) (let Y (hd Tm8915) (let Tm8916 (shen.lazyderef (tl Tm8915) V9450) (if (= Tm8916 ()) (let Tm8917 (shen.lazyderef V9448 V9450) (let GoTo8918 (lambda A (do (shen.incinfs) (shen.system-S-h X A V9449 V9450 V9451 K8857 (freeze (shen.system-S-h Y (cons vector (cons A ())) V9449 V9450 V9451 K8857 V9453))))) (if (cons? Tm8917) (let Tm8919 (shen.lazyderef (hd Tm8917) V9450) (let GoTo8920 (freeze (let Tm8921 (shen.lazyderef (tl Tm8917) V9450) (let GoTo8922 (lambda A (GoTo8918 A)) (if (cons? Tm8921) (let A (hd Tm8921) (let Tm8923 (shen.lazyderef (tl Tm8921) V9450) (let GoTo8924 (freeze (GoTo8922 A)) (if (= Tm8923 ()) (thaw GoTo8924) (if (shen.pvar? Tm8923) (shen.bind! Tm8923 () V9450 GoTo8924) false))))) (if (shen.pvar? Tm8921) (let A (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8921 (cons A ()) V9450 (freeze (GoTo8922 A))))) false))))) (if (= Tm8919 vector) (thaw GoTo8920) (if (shen.pvar? Tm8919) (shen.bind! Tm8919 vector V9450 GoTo8920) false)))) (if (shen.pvar? Tm8917) (let A (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8917 (cons vector (cons A ())) V9450 (freeze (GoTo8918 A))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8911 false) (let C8925 (if (shen.unlocked? V9451) (let Tm8926 (shen.lazyderef V9447 V9450) (if (cons? Tm8926) (let Tm8927 (shen.lazyderef (hd Tm8926) V9450) (if (= Tm8927 @s) (let Tm8928 (shen.lazyderef (tl Tm8926) V9450) (if (cons? Tm8928) (let X (hd Tm8928) (let Tm8929 (shen.lazyderef (tl Tm8928) V9450) (if (cons? Tm8929) (let Y (hd Tm8929) (let Tm8930 (shen.lazyderef (tl Tm8929) V9450) (if (= Tm8930 ()) (let Tm8931 (shen.lazyderef V9448 V9450) (let GoTo8932 (freeze (do (shen.incinfs) (shen.system-S-h X string V9449 V9450 V9451 K8857 (freeze (shen.system-S-h Y string V9449 V9450 V9451 K8857 V9453))))) (if (= Tm8931 string) (thaw GoTo8932) (if (shen.pvar? Tm8931) (shen.bind! Tm8931 string V9450 GoTo8932) false)))) false))) false))) false)) false)) false)) false) (if (= C8925 false) (let C8933 (if (shen.unlocked? V9451) (let Tm8934 (shen.lazyderef V9447 V9450) (if (cons? Tm8934) (let Tm8935 (shen.lazyderef (hd Tm8934) V9450) (if (= Tm8935 lambda) (let Tm8936 (shen.lazyderef (tl Tm8934) V9450) (if (cons? Tm8936) (let X (hd Tm8936) (let Tm8937 (shen.lazyderef (tl Tm8936) V9450) (if (cons? Tm8937) (let Y (hd Tm8937) (let Tm8938 (shen.lazyderef (tl Tm8937) V9450) (if (= Tm8938 ()) (let Tm8939 (shen.lazyderef V9448 V9450) (let GoTo8940 (lambda A (lambda B (let Z (shen.newpv V9450) (shen.gc V9450 (let New (shen.newpv V9450) (shen.gc V9450 (do (shen.incinfs) (bind New (shen.freshterm (shen.lazyderef X V9450)) V9450 V9451 K8857 (freeze (bind Z (shen.beta (shen.lazyderef X V9450) (shen.deref New V9450) (shen.deref Y V9450)) V9450 V9451 K8857 (freeze (shen.system-S-h Z B (cons (cons New (cons (intern ":") (cons A ()))) V9449) V9450 V9451 K8857 V9453)))))))))))) (if (cons? Tm8939) (let A (hd Tm8939) (let Tm8941 (shen.lazyderef (tl Tm8939) V9450) (let GoTo8942 (lambda B ((GoTo8940 A) B)) (if (cons? Tm8941) (let Tm8943 (shen.lazyderef (hd Tm8941) V9450) (let GoTo8944 (freeze (let Tm8945 (shen.lazyderef (tl Tm8941) V9450) (let GoTo8946 (lambda B (GoTo8942 B)) (if (cons? Tm8945) (let B (hd Tm8945) (let Tm8947 (shen.lazyderef (tl Tm8945) V9450) (let GoTo8948 (freeze (GoTo8946 B)) (if (= Tm8947 ()) (thaw GoTo8948) (if (shen.pvar? Tm8947) (shen.bind! Tm8947 () V9450 GoTo8948) false))))) (if (shen.pvar? Tm8945) (let B (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8945 (cons B ()) V9450 (freeze (GoTo8946 B))))) false))))) (if (= Tm8943 -->) (thaw GoTo8944) (if (shen.pvar? Tm8943) (shen.bind! Tm8943 --> V9450 GoTo8944) false)))) (if (shen.pvar? Tm8941) (let B (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8941 (cons --> (cons B ())) V9450 (freeze (GoTo8942 B))))) false))))) (if (shen.pvar? Tm8939) (let A (shen.newpv V9450) (shen.gc V9450 (let B (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8939 (cons A (cons --> (cons B ()))) V9450 (freeze ((GoTo8940 A) B))))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8933 false) (let C8949 (if (shen.unlocked? V9451) (let Tm8950 (shen.lazyderef V9447 V9450) (if (cons? Tm8950) (let Tm8951 (shen.lazyderef (hd Tm8950) V9450) (if (= Tm8951 let) (let Tm8952 (shen.lazyderef (tl Tm8950) V9450) (if (cons? Tm8952) (let X (hd Tm8952) (let Tm8953 (shen.lazyderef (tl Tm8952) V9450) (if (cons? Tm8953) (let Y (hd Tm8953) (let Tm8954 (shen.lazyderef (tl Tm8953) V9450) (if (cons? Tm8954) (let Z (hd Tm8954) (let Tm8955 (shen.lazyderef (tl Tm8954) V9450) (if (= Tm8955 ()) (let W (shen.newpv V9450) (shen.gc V9450 (let New (shen.newpv V9450) (shen.gc V9450 (let B (shen.newpv V9450) (shen.gc V9450 (do (shen.incinfs) (shen.system-S-h Y B V9449 V9450 V9451 K8857 (freeze (bind New (shen.freshterm (shen.lazyderef X V9450)) V9450 V9451 K8857 (freeze (bind W (shen.beta (shen.lazyderef X V9450) (shen.lazyderef New V9450) (shen.lazyderef Z V9450)) V9450 V9451 K8857 (freeze (shen.system-S-h W V9448 (cons (cons New (cons (intern ":") (cons B ()))) V9449) V9450 V9451 K8857 V9453)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= C8949 false) (let C8956 (if (shen.unlocked? V9451) (let Tm8957 (shen.lazyderef V9447 V9450) (if (cons? Tm8957) (let Tm8958 (shen.lazyderef (hd Tm8957) V9450) (if (= Tm8958 open) (let Tm8959 (shen.lazyderef (tl Tm8957) V9450) (if (cons? Tm8959) (let File (hd Tm8959) (let Tm8960 (shen.lazyderef (tl Tm8959) V9450) (if (cons? Tm8960) (let V8854 (hd Tm8960) (let Tm8961 (shen.lazyderef (tl Tm8960) V9450) (if (= Tm8961 ()) (let Tm8962 (shen.lazyderef V9448 V9450) (let GoTo8963 (lambda D (do (shen.incinfs) (is! V8854 D V9450 V9451 K8857 (freeze (when (element? (shen.lazyderef D V9450) (cons in (cons out ()))) V9450 V9451 K8857 (freeze (shen.system-S-h File string V9449 V9450 V9451 K8857 V9453))))))) (if (cons? Tm8962) (let Tm8964 (shen.lazyderef (hd Tm8962) V9450) (let GoTo8965 (freeze (let Tm8966 (shen.lazyderef (tl Tm8962) V9450) (let GoTo8967 (lambda D (GoTo8963 D)) (if (cons? Tm8966) (let D (hd Tm8966) (let Tm8968 (shen.lazyderef (tl Tm8966) V9450) (let GoTo8969 (freeze (GoTo8967 D)) (if (= Tm8968 ()) (thaw GoTo8969) (if (shen.pvar? Tm8968) (shen.bind! Tm8968 () V9450 GoTo8969) false))))) (if (shen.pvar? Tm8966) (let D (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8966 (cons D ()) V9450 (freeze (GoTo8967 D))))) false))))) (if (= Tm8964 stream) (thaw GoTo8965) (if (shen.pvar? Tm8964) (shen.bind! Tm8964 stream V9450 GoTo8965) false)))) (if (shen.pvar? Tm8962) (let D (shen.newpv V9450) (shen.gc V9450 (shen.bind! Tm8962 (cons stream (cons D ())) V9450 (freeze (GoTo8963 D))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8956 false) (let C8970 (if (shen.unlocked? V9451) (let Tm8971 (shen.lazyderef V9447 V9450) (if (cons? Tm8971) (let Tm8972 (shen.lazyderef (hd Tm8971) V9450) (if (= Tm8972 type) (let Tm8973 (shen.lazyderef (tl Tm8971) V9450) (if (cons? Tm8973) (let X (hd Tm8973) (let Tm8974 (shen.lazyderef (tl Tm8973) V9450) (if (cons? Tm8974) (let A (hd Tm8974) (let Tm8975 (shen.lazyderef (tl Tm8974) V9450) (if (= Tm8975 ()) (do (shen.incinfs) (shen.cut V9450 V9451 K8857 (freeze (is! (shen.rectify-type (shen.deref A V9450)) V9448 V9450 V9451 K8857 (freeze (shen.system-S-h X V9448 V9449 V9450 V9451 K8857 V9453)))))) false))) false))) false)) false)) false)) false) (if (= C8970 false) (let C8976 (if (shen.unlocked? V9451) (let Tm8977 (shen.lazyderef V9447 V9450) (if (cons? Tm8977) (let Tm8978 (shen.lazyderef (hd Tm8977) V9450) (if (= Tm8978 input+) (let Tm8979 (shen.lazyderef (tl Tm8977) V9450) (if (cons? Tm8979) (let A (hd Tm8979) (let Tm8980 (shen.lazyderef (tl Tm8979) V9450) (if (cons? Tm8980) (let Stream (hd Tm8980) (let Tm8981 (shen.lazyderef (tl Tm8980) V9450) (if (= Tm8981 ()) (do (shen.incinfs) (is! V9448 (shen.rectify-type (shen.deref A V9450)) V9450 V9451 K8857 (freeze (shen.system-S-h Stream (cons stream (cons in ())) V9449 V9450 V9451 K8857 V9453)))) false))) false))) false)) false)) false)) false) (if (= C8976 false) (let C8982 (if (shen.unlocked? V9451) (let Tm8983 (shen.lazyderef V9447 V9450) (if (cons? Tm8983) (let Tm8984 (shen.lazyderef (hd Tm8983) V9450) (if (= Tm8984 set) (let Tm8985 (shen.lazyderef (tl Tm8983) V9450) (if (cons? Tm8985) (let Var (hd Tm8985) (let Tm8986 (shen.lazyderef (tl Tm8985) V9450) (if (cons? Tm8986) (let Val (hd Tm8986) (let Tm8987 (shen.lazyderef (tl Tm8986) V9450) (if (= Tm8987 ()) (do (shen.incinfs) (shen.system-S-h Var symbol V9449 V9450 V9451 K8857 (freeze (shen.system-S-h (cons value (cons Var ())) V9448 V9449 V9450 V9451 K8857 (freeze (shen.system-S-h Val V9448 V9449 V9450 V9451 K8857 V9453)))))) false))) false))) false)) false)) false)) false) (if (= C8982 false) (let C8988 (if (shen.unlocked? V9451) (let Normalised (shen.newpv V9450) (shen.gc V9450 (do (shen.incinfs) (shen.l-rules V9449 Normalised false V9450 V9451 K8857 (freeze (shen.cut V9450 V9451 K8857 (freeze (shen.system-S-h V9447 V9448 Normalised V9450 V9451 K8857 V9453)))))))) false) (if (= C8988 false) (let C8989 (if (shen.unlocked? V9451) (do (shen.incinfs) (shen.search-user-datatypes (cons V9447 (cons (intern ":") (cons V9448 ()))) V9449 (value shen.*datatypes*) V9450 V9451 K8857 V9453)) false) (if (= C8989 false) (shen.unlock V9451 K8857) C8989)) C8988)) C8982)) C8976)) C8970)) C8956)) C8949)) C8933)) C8925)) C8911)) C8895)) C8881)) C8877)) C8873)) C8868)) C8865)) C8864)) C8863)) C8862))))

(defun shen.primitive (V9454 V9455 V9456 V9457 V9458 V9459) (let C8996 (if (shen.unlocked? V9457) (let Tm8997 (shen.lazyderef V9455 V9456) (let GoTo8998 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V9454 V9456)) V9456 V9457 V9458 V9459))) (if (= Tm8997 number) (thaw GoTo8998) (if (shen.pvar? Tm8997) (shen.bind! Tm8997 number V9456 GoTo8998) false)))) false) (if (= C8996 false) (let C8999 (if (shen.unlocked? V9457) (let Tm9000 (shen.lazyderef V9455 V9456) (let GoTo9001 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V9454 V9456)) V9456 V9457 V9458 V9459))) (if (= Tm9000 boolean) (thaw GoTo9001) (if (shen.pvar? Tm9000) (shen.bind! Tm9000 boolean V9456 GoTo9001) false)))) false) (if (= C8999 false) (let C9002 (if (shen.unlocked? V9457) (let Tm9003 (shen.lazyderef V9455 V9456) (let GoTo9004 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V9454 V9456)) V9456 V9457 V9458 V9459))) (if (= Tm9003 string) (thaw GoTo9004) (if (shen.pvar? Tm9003) (shen.bind! Tm9003 string V9456 GoTo9004) false)))) false) (if (= C9002 false) (let C9005 (if (shen.unlocked? V9457) (let Tm9006 (shen.lazyderef V9455 V9456) (let GoTo9007 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V9454 V9456)) V9456 V9457 V9458 V9459))) (if (= Tm9006 symbol) (thaw GoTo9007) (if (shen.pvar? Tm9006) (shen.bind! Tm9006 symbol V9456 GoTo9007) false)))) false) (if (= C9005 false) (if (shen.unlocked? V9457) (let Tm9008 (shen.lazyderef V9454 V9456) (if (= Tm9008 ()) (let Tm9009 (shen.lazyderef V9455 V9456) (let GoTo9010 (lambda A (do (shen.incinfs) (thaw V9459))) (if (cons? Tm9009) (let Tm9011 (shen.lazyderef (hd Tm9009) V9456) (let GoTo9012 (freeze (let Tm9013 (shen.lazyderef (tl Tm9009) V9456) (let GoTo9014 (lambda A (GoTo9010 A)) (if (cons? Tm9013) (let A (hd Tm9013) (let Tm9015 (shen.lazyderef (tl Tm9013) V9456) (let GoTo9016 (freeze (GoTo9014 A)) (if (= Tm9015 ()) (thaw GoTo9016) (if (shen.pvar? Tm9015) (shen.bind! Tm9015 () V9456 GoTo9016) false))))) (if (shen.pvar? Tm9013) (let A (shen.newpv V9456) (shen.gc V9456 (shen.bind! Tm9013 (cons A ()) V9456 (freeze (GoTo9014 A))))) false))))) (if (= Tm9011 list) (thaw GoTo9012) (if (shen.pvar? Tm9011) (shen.bind! Tm9011 list V9456 GoTo9012) false)))) (if (shen.pvar? Tm9009) (let A (shen.newpv V9456) (shen.gc V9456 (shen.bind! Tm9009 (cons list (cons A ())) V9456 (freeze (GoTo9010 A))))) false)))) false)) false) C9005)) C9002)) C8999)) C8996)))

(defun shen.by-hypothesis (V9460 V9461 V9462 V9463 V9464 V9465 V9466) (let C9024 (if (shen.unlocked? V9464) (let Tm9025 (shen.lazyderef V9462 V9463) (if (cons? Tm9025) (let Tm9026 (shen.lazyderef (hd Tm9025) V9463) (if (cons? Tm9026) (let Y (hd Tm9026) (let Tm9027 (shen.lazyderef (tl Tm9026) V9463) (if (cons? Tm9027) (let Colon (hd Tm9027) (let Tm9028 (shen.lazyderef (tl Tm9027) V9463) (if (cons? Tm9028) (let B (hd Tm9028) (let Tm9029 (shen.lazyderef (tl Tm9028) V9463) (if (= Tm9029 ()) (do (shen.incinfs) (when (= (shen.deref Colon V9463) (intern ":")) V9463 V9464 V9465 (freeze (when (= (shen.deref V9460 V9463) (shen.deref Y V9463)) V9463 V9464 V9465 (freeze (is! V9461 B V9463 V9464 V9465 V9466)))))) false))) false))) false))) false)) false)) false) (if (= C9024 false) (if (shen.unlocked? V9464) (let Tm9030 (shen.lazyderef V9462 V9463) (if (cons? Tm9030) (let Hyp (tl Tm9030) (do (shen.incinfs) (shen.by-hypothesis V9460 V9461 Hyp V9463 V9464 V9465 V9466))) false)) false) C9024)))

(defun shen.lookupsig (V9467 V9468 V9469 V9470 V9471 V9472) (if (shen.unlocked? V9470) (do (shen.incinfs) (shen.sigf (assoc V9467 (value shen.*sigf*)) V9468 V9469 V9470 V9471 V9472)) false))

(defun shen.sigf (V9487 V9488 V9489 V9490 V9491 V9492) (cond ((cons? V9487) ((((((tl V9487) V9488) V9489) V9490) V9491) V9492)) (true false)))

(defun shen.freshterm (V9493) (let V (absvector 3) (let V0 (address-> V 0 shen.print-freshterm) (let V1 (address-> V0 1 V9493) (let V2 (address-> V1 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) V2)))))

(defun shen.print-freshterm (V9494) (cn "&&" (str (<-address V9494 1))))

(defun shen.search-user-datatypes (V9495 V9496 V9497 V9498 V9499 V9500 V9501) (let C9044 (if (shen.unlocked? V9499) (let Tm9045 (shen.lazyderef V9497 V9498) (if (cons? Tm9045) (let Tm9046 (shen.lazyderef (hd Tm9045) V9498) (if (cons? Tm9046) (let Fn (tl Tm9046) (do (shen.incinfs) (call (((shen.deref Fn V9498) (shen.deref V9495 V9498)) (shen.deref V9496 V9498)) V9498 V9499 V9500 V9501))) false)) false)) false) (if (= C9044 false) (if (shen.unlocked? V9499) (let Tm9047 (shen.lazyderef V9497 V9498) (if (cons? Tm9047) (let Ds (tl Tm9047) (do (shen.incinfs) (shen.search-user-datatypes V9495 V9496 Ds V9498 V9499 V9500 V9501))) false)) false) C9044)))

(defun shen.l-rules (V9502 V9503 V9504 V9505 V9506 V9507 V9508) (let K9050 (+ V9507 1) (let C9055 (if (shen.unlocked? V9506) (let Tm9056 (shen.lazyderef V9502 V9505) (if (= Tm9056 ()) (let Tm9057 (shen.lazyderef V9504 V9505) (if (= Tm9057 true) (do (shen.incinfs) (shen.cut V9505 V9506 K9050 (freeze (bind V9503 () V9505 V9506 K9050 V9508)))) false)) false)) false) (if (= C9055 false) (let C9058 (if (shen.unlocked? V9506) (let Tm9059 (shen.lazyderef V9502 V9505) (if (cons? Tm9059) (let Tm9060 (shen.lazyderef (hd Tm9059) V9505) (if (cons? Tm9060) (let Tm9061 (shen.lazyderef (hd Tm9060) V9505) (if (cons? Tm9061) (let Tm9062 (shen.lazyderef (hd Tm9061) V9505) (if (= Tm9062 cons) (let Tm9063 (shen.lazyderef (tl Tm9061) V9505) (if (cons? Tm9063) (let X (hd Tm9063) (let Tm9064 (shen.lazyderef (tl Tm9063) V9505) (if (cons? Tm9064) (let Y (hd Tm9064) (let Tm9065 (shen.lazyderef (tl Tm9064) V9505) (if (= Tm9065 ()) (let Tm9066 (shen.lazyderef (tl Tm9060) V9505) (if (cons? Tm9066) (let Colon (hd Tm9066) (let Tm9067 (shen.lazyderef (tl Tm9066) V9505) (if (cons? Tm9067) (let Tm9068 (shen.lazyderef (hd Tm9067) V9505) (if (cons? Tm9068) (let Tm9069 (shen.lazyderef (hd Tm9068) V9505) (if (= Tm9069 list) (let Tm9070 (shen.lazyderef (tl Tm9068) V9505) (if (cons? Tm9070) (let A (hd Tm9070) (let Tm9071 (shen.lazyderef (tl Tm9070) V9505) (if (= Tm9071 ()) (let Tm9072 (shen.lazyderef (tl Tm9067) V9505) (if (= Tm9072 ()) (let Hyp (tl Tm9059) (do (shen.incinfs) (when (= (shen.deref Colon V9505) (intern ":")) V9505 V9506 K9050 (freeze (shen.cut V9505 V9506 K9050 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons (cons list (cons A ())) ()))) Hyp)) V9503 true V9505 V9506 K9050 V9508))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9058 false) (let C9073 (if (shen.unlocked? V9506) (let Tm9074 (shen.lazyderef V9502 V9505) (if (cons? Tm9074) (let Tm9075 (shen.lazyderef (hd Tm9074) V9505) (if (cons? Tm9075) (let Tm9076 (shen.lazyderef (hd Tm9075) V9505) (if (cons? Tm9076) (let Tm9077 (shen.lazyderef (hd Tm9076) V9505) (if (= Tm9077 @p) (let Tm9078 (shen.lazyderef (tl Tm9076) V9505) (if (cons? Tm9078) (let X (hd Tm9078) (let Tm9079 (shen.lazyderef (tl Tm9078) V9505) (if (cons? Tm9079) (let Y (hd Tm9079) (let Tm9080 (shen.lazyderef (tl Tm9079) V9505) (if (= Tm9080 ()) (let Tm9081 (shen.lazyderef (tl Tm9075) V9505) (if (cons? Tm9081) (let Colon (hd Tm9081) (let Tm9082 (shen.lazyderef (tl Tm9081) V9505) (if (cons? Tm9082) (let Tm9083 (shen.lazyderef (hd Tm9082) V9505) (if (cons? Tm9083) (let A (hd Tm9083) (let Tm9084 (shen.lazyderef (tl Tm9083) V9505) (if (cons? Tm9084) (let Tm9085 (shen.lazyderef (hd Tm9084) V9505) (if (= Tm9085 *) (let Tm9086 (shen.lazyderef (tl Tm9084) V9505) (if (cons? Tm9086) (let B (hd Tm9086) (let Tm9087 (shen.lazyderef (tl Tm9086) V9505) (if (= Tm9087 ()) (let Tm9088 (shen.lazyderef (tl Tm9082) V9505) (if (= Tm9088 ()) (let Hyp (tl Tm9074) (do (shen.incinfs) (when (= (shen.deref Colon V9505) (intern ":")) V9505 V9506 K9050 (freeze (shen.cut V9505 V9506 K9050 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons B ()))) Hyp)) V9503 true V9505 V9506 K9050 V9508))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9073 false) (let C9089 (if (shen.unlocked? V9506) (let Tm9090 (shen.lazyderef V9502 V9505) (if (cons? Tm9090) (let Tm9091 (shen.lazyderef (hd Tm9090) V9505) (if (cons? Tm9091) (let Tm9092 (shen.lazyderef (hd Tm9091) V9505) (if (cons? Tm9092) (let Tm9093 (shen.lazyderef (hd Tm9092) V9505) (if (= Tm9093 @s) (let Tm9094 (shen.lazyderef (tl Tm9092) V9505) (if (cons? Tm9094) (let X (hd Tm9094) (let Tm9095 (shen.lazyderef (tl Tm9094) V9505) (if (cons? Tm9095) (let Y (hd Tm9095) (let Tm9096 (shen.lazyderef (tl Tm9095) V9505) (if (= Tm9096 ()) (let Tm9097 (shen.lazyderef (tl Tm9091) V9505) (if (cons? Tm9097) (let Colon (hd Tm9097) (let Tm9098 (shen.lazyderef (tl Tm9097) V9505) (if (cons? Tm9098) (let Tm9099 (shen.lazyderef (hd Tm9098) V9505) (if (= Tm9099 string) (let Tm9100 (shen.lazyderef (tl Tm9098) V9505) (if (= Tm9100 ()) (let Hyp (tl Tm9090) (do (shen.incinfs) (when (= (shen.deref Colon V9505) (intern ":")) V9505 V9506 K9050 (freeze (shen.cut V9505 V9506 K9050 (freeze (shen.l-rules (cons (cons X (cons Colon (cons string ()))) (cons (cons Y (cons Colon (cons string ()))) Hyp)) V9503 true V9505 V9506 K9050 V9508))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9089 false) (let C9101 (if (shen.unlocked? V9506) (let Tm9102 (shen.lazyderef V9502 V9505) (if (cons? Tm9102) (let Tm9103 (shen.lazyderef (hd Tm9102) V9505) (if (cons? Tm9103) (let Tm9104 (shen.lazyderef (hd Tm9103) V9505) (if (cons? Tm9104) (let Tm9105 (shen.lazyderef (hd Tm9104) V9505) (if (= Tm9105 @v) (let Tm9106 (shen.lazyderef (tl Tm9104) V9505) (if (cons? Tm9106) (let X (hd Tm9106) (let Tm9107 (shen.lazyderef (tl Tm9106) V9505) (if (cons? Tm9107) (let Y (hd Tm9107) (let Tm9108 (shen.lazyderef (tl Tm9107) V9505) (if (= Tm9108 ()) (let Tm9109 (shen.lazyderef (tl Tm9103) V9505) (if (cons? Tm9109) (let Colon (hd Tm9109) (let Tm9110 (shen.lazyderef (tl Tm9109) V9505) (if (cons? Tm9110) (let Tm9111 (shen.lazyderef (hd Tm9110) V9505) (if (cons? Tm9111) (let Tm9112 (shen.lazyderef (hd Tm9111) V9505) (if (= Tm9112 vector) (let Tm9113 (shen.lazyderef (tl Tm9111) V9505) (if (cons? Tm9113) (let A (hd Tm9113) (let Tm9114 (shen.lazyderef (tl Tm9113) V9505) (if (= Tm9114 ()) (let Tm9115 (shen.lazyderef (tl Tm9110) V9505) (if (= Tm9115 ()) (let Hyp (tl Tm9102) (do (shen.incinfs) (when (= (shen.deref Colon V9505) (intern ":")) V9505 V9506 K9050 (freeze (shen.cut V9505 V9506 K9050 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons (cons vector (cons A ())) ()))) Hyp)) V9503 true V9505 V9506 K9050 V9508))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9101 false) (let C9116 (if (shen.unlocked? V9506) (let Tm9117 (shen.lazyderef V9502 V9505) (if (cons? Tm9117) (let P (hd Tm9117) (let Hyp (tl Tm9117) (let Tm9118 (shen.lazyderef V9503 V9505) (let GoTo9119 (lambda Q (lambda Normalised (do (shen.incinfs) (bind Q P V9505 V9506 K9050 (freeze (shen.l-rules Hyp Normalised V9504 V9505 V9506 K9050 V9508)))))) (if (cons? Tm9118) (let Q (hd Tm9118) (let Normalised (tl Tm9118) ((GoTo9119 Q) Normalised))) (if (shen.pvar? Tm9118) (let Q (shen.newpv V9505) (shen.gc V9505 (let Normalised (shen.newpv V9505) (shen.gc V9505 (shen.bind! Tm9118 (cons Q Normalised) V9505 (freeze ((GoTo9119 Q) Normalised))))))) false)))))) false)) false) (if (= C9116 false) (shen.unlock V9506 K9050) C9116)) C9101)) C9089)) C9073)) C9058)) C9055))))

(defun shen.t* (V9509 V9510 V9511 V9512 V9513 V9514) (let K9122 (+ V9513 1) (let C9126 (if (shen.unlocked? V9512) (let Tm9127 (shen.lazyderef V9509 V9511) (if (cons? Tm9127) (let Tm9128 (shen.lazyderef (hd Tm9127) V9511) (if (= Tm9128 define) (let Tm9129 (shen.lazyderef (tl Tm9127) V9511) (if (cons? Tm9129) (let F (hd Tm9129) (let X (tl Tm9129) (let SigxRules (shen.newpv V9511) (shen.gc V9511 (let Rules (shen.newpv V9511) (shen.gc V9511 (let FreshSig (shen.newpv V9511) (shen.gc V9511 (let Sig (shen.newpv V9511) (shen.gc V9511 (do (shen.incinfs) (shen.cut V9511 V9512 K9122 (freeze (bind SigxRules (shen.sigxrules (cons F X)) V9511 V9512 K9122 (freeze (bind Sig (fst (shen.lazyderef SigxRules V9511)) V9511 V9512 K9122 (freeze (bind Rules (snd (shen.lazyderef SigxRules V9511)) V9511 V9512 K9122 (freeze (bind FreshSig (shen.freshen-sig (shen.deref Sig V9511)) V9511 V9512 K9122 (freeze (shen.t*-rules F Rules FreshSig 1 V9511 V9512 K9122 (freeze (is Sig V9510 V9511 V9512 K9122 V9514)))))))))))))))))))))))) false)) false)) false)) false) (if (= C9126 false) (shen.unlock V9512 K9122) C9126))))

(defun shen.sigxrules (V9515) (compile (lambda X (shen.<sig*rules> X)) V9515))

(defun shen.<sig*rules> (V9516) (let Result (if (shen.non-empty-stream? V9516) (let F (shen.hds V9516) (let News9131 (shen.tls V9516) (if (shen.=hd? News9131 {) (let News9132 (shen.tls News9131) (let Parseshen.<signature> (shen.<signature> News9132) (if (shen.parse-failure? Parseshen.<signature>) (shen.parse-failure) (if (shen.=hd? Parseshen.<signature> }) (let News9133 (shen.tls Parseshen.<signature>) (let Parseshen.<rules*> (shen.<rules*> News9133) (if (shen.parse-failure? Parseshen.<rules*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rules*>) (let Rectified (shen.rectify-type (shen.<-out Parseshen.<signature>)) (@p Rectified (shen.<-out Parseshen.<rules*>))))))) (shen.parse-failure))))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.freshen-sig (V9517) (let Vs (shen.extract-vars V9517) (let Assoc (map (lambda V (cons V (shen.freshterm (concat & V)))) Vs) (shen.freshen-type Assoc V9517))))

(defun shen.freshen-type (V9518 V9519) (cond ((= () V9518) V9519) ((and (cons? V9518) (cons? (hd V9518))) (shen.freshen-type (tl V9518) (subst (tl (hd V9518)) (hd (hd V9518)) V9519))) (true (shen.f-error shen.freshen-type))))

(defun shen.<rules*> (V9520) (let Result (let Parseshen.<rule*> (shen.<rule*> V9520) (if (shen.parse-failure? Parseshen.<rule*>) (shen.parse-failure) (let Parseshen.<rules*> (shen.<rules*> Parseshen.<rule*>) (if (shen.parse-failure? Parseshen.<rules*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rules*>) (cons (shen.<-out Parseshen.<rule*>) (shen.<-out Parseshen.<rules*>))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<rule*> (shen.<rule*> V9520) (if (shen.parse-failure? Parseshen.<rule*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rule*>) (cons (shen.<-out Parseshen.<rule*>) ())))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<rule*> (V9521) (let Result (let Parseshen.<patterns> (shen.<patterns> V9521) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> ->) (let News9136 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9136) (let Action (shen.hds News9136) (let News9137 (shen.tls News9136) (if (shen.=hd? News9137 where) (let News9138 (shen.tls News9137) (if (shen.non-empty-stream? News9138) (let Guard (shen.hds News9138) (let News9139 (shen.tls News9138) (shen.comb (shen.in-> News9139) (@p (shen.<-out Parseshen.<patterns>) (cons where (cons Guard (cons Action ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9521) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> <-) (let News9140 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9140) (let Action (shen.hds News9140) (let News9141 (shen.tls News9140) (if (shen.=hd? News9141 where) (let News9142 (shen.tls News9141) (if (shen.non-empty-stream? News9142) (let Guard (shen.hds News9142) (let News9143 (shen.tls News9142) (shen.comb (shen.in-> News9143) (@p (shen.<-out Parseshen.<patterns>) (shen.correct (cons where (cons Guard (cons Action ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9521) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> <-) (let News9144 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9144) (let Action (shen.hds News9144) (let News9145 (shen.tls News9144) (shen.comb (shen.in-> News9145) (@p (shen.<-out Parseshen.<patterns>) (shen.correct Action))))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9521) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> ->) (let News9146 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9146) (let Action (shen.hds News9146) (let News9147 (shen.tls News9146) (shen.comb (shen.in-> News9147) (@p (shen.<-out Parseshen.<patterns>) Action)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)))

(defun shen.correct (V9522) (cond ((and (cons? V9522) (and (= where (hd V9522)) (and (cons? (tl V9522)) (and (cons? (tl (tl V9522))) (and (cons? (hd (tl (tl V9522)))) (and (= fail-if (hd (hd (tl (tl V9522))))) (and (cons? (tl (hd (tl (tl V9522))))) (and (cons? (tl (tl (hd (tl (tl V9522)))))) (and (= () (tl (tl (tl (hd (tl (tl V9522))))))) (= () (tl (tl (tl V9522))))))))))))) (cons where (cons (cons and (cons (hd (tl V9522)) (cons (cons not (cons (tl (hd (tl (tl V9522)))) ())) ()))) (tl (tl (hd (tl (tl V9522)))))))) ((and (cons? V9522) (and (= where (hd V9522)) (and (cons? (tl V9522)) (and (cons? (tl (tl V9522))) (= () (tl (tl (tl V9522)))))))) (cons where (cons (cons and (cons (hd (tl V9522)) (cons (cons not (cons (cons = (cons (hd (tl (tl V9522))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V9522))))) ((and (cons? V9522) (and (= fail-if (hd V9522)) (and (cons? (tl V9522)) (and (cons? (tl (tl V9522))) (= () (tl (tl (tl V9522)))))))) (cons where (cons (cons not (cons (tl V9522) ())) (tl (tl V9522))))) (true (cons where (cons (cons not (cons (cons = (cons V9522 (cons (cons fail ()) ()))) ())) (cons V9522 ()))))))

(defun shen.t*-rules (V9523 V9524 V9525 V9526 V9527 V9528 V9529 V9530) (let K9150 (+ V9529 1) (let C9156 (if (shen.unlocked? V9528) (let Tm9157 (shen.lazyderef V9524 V9527) (if (= Tm9157 ()) (do (shen.incinfs) (thaw V9530)) false)) false) (if (= C9156 false) (let C9158 (if (shen.unlocked? V9528) (let Tm9159 (shen.lazyderef V9524 V9527) (if (cons? Tm9159) (let Rule (hd Tm9159) (let Rules (tl Tm9159) (let Fresh (shen.newpv V9527) (shen.gc V9527 (do (shen.incinfs) (bind Fresh (shen.freshen-rule (shen.deref Rule V9527)) V9527 V9528 K9150 (freeze (shen.t*-rule V9523 V9526 (fst (shen.lazyderef Fresh V9527)) (snd (shen.lazyderef Fresh V9527)) V9525 V9527 V9528 K9150 (freeze (shen.cut V9527 V9528 K9150 (freeze (shen.t*-rules V9523 Rules V9525 (+ V9526 1) V9527 V9528 K9150 V9530)))))))))))) false)) false) (if (= C9158 false) (shen.unlock V9528 K9150) C9158)) C9156))))

(defun shen.freshen-rule (V9531) (cond ((tuple? V9531) (let Vs (shen.extract-vars (fst V9531)) (let Assoc (map (lambda V (cons V (shen.freshterm V))) Vs) (@p (shen.freshen Assoc (fst V9531)) (shen.freshen Assoc (snd V9531)))))) (true (shen.f-error shen.freshen-rule))))

(defun shen.freshen (V9532 V9533) (cond ((= () V9532) V9533) ((and (cons? V9532) (cons? (hd V9532))) (shen.freshen (tl V9532) (shen.beta (hd (hd V9532)) (tl (hd V9532)) V9533))) (true (shen.f-error shen.freshen))))

(defun shen.t*-rule (V9534 V9535 V9536 V9537 V9538 V9539 V9540 V9541 V9542) (let C9169 (if (shen.unlocked? V9540) (do (shen.incinfs) (shen.t*-rule-h V9536 V9537 V9538 V9539 V9540 V9541 V9542)) false) (if (= C9169 false) (if (shen.unlocked? V9540) (let Err (shen.newpv V9539) (shen.gc V9539 (do (shen.incinfs) (bind Err (simple-error (cn "type error in rule " (shen.app V9535 (cn " of " (shen.app V9534 "
" shen.a)) shen.a))) V9539 V9540 V9541 V9542)))) false) C9169)))

(defun shen.t*-rule-h (V9543 V9544 V9545 V9546 V9547 V9548 V9549) (let K9172 (+ V9548 1) (let C9177 (if (shen.unlocked? V9547) (let Tm9178 (shen.lazyderef V9543 V9546) (if (= Tm9178 ()) (let Tm9179 (shen.lazyderef V9545 V9546) (if (cons? Tm9179) (let Tm9180 (shen.lazyderef (hd Tm9179) V9546) (if (= Tm9180 -->) (let Tm9181 (shen.lazyderef (tl Tm9179) V9546) (if (cons? Tm9181) (let A (hd Tm9181) (let Tm9182 (shen.lazyderef (tl Tm9181) V9546) (if (= Tm9182 ()) (do (shen.incinfs) (shen.cut V9546 V9547 K9172 (freeze (shen.t*-correct V9544 A () V9546 V9547 K9172 V9549)))) false))) false)) false)) false)) false)) false) (if (= C9177 false) (let C9183 (if (shen.unlocked? V9547) (let B (shen.newpv V9546) (shen.gc V9546 (let Hyps (shen.newpv V9546) (shen.gc V9546 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V9543) Hyps V9546 V9547 K9172 (freeze (shen.t*-integrity V9543 V9545 Hyps B V9546 V9547 K9172 (freeze (shen.cut V9546 V9547 K9172 (freeze (shen.t*-correct V9544 B Hyps V9546 V9547 K9172 V9549)))))))))))) false) (if (= C9183 false) (shen.unlock V9547 K9172) C9183)) C9177))))

(defun shen.freshterms (V9552) (cond ((= () V9552) ()) ((and (cons? V9552) (cons? (hd V9552))) (shen.freshterms (append (hd V9552) (tl V9552)))) ((and (cons? V9552) (shen.freshterm? (hd V9552))) (adjoin (hd V9552) (shen.freshterms (tl V9552)))) ((cons? V9552) (shen.freshterms (tl V9552))) (true (shen.f-error shen.freshterms))))

(defun shen.p-hyps (V9553 V9554 V9555 V9556 V9557 V9558) (let C9190 (if (shen.unlocked? V9556) (let Tm9191 (shen.lazyderef V9553 V9555) (if (= Tm9191 ()) (let Tm9192 (shen.lazyderef V9554 V9555) (let GoTo9193 (freeze (do (shen.incinfs) (thaw V9558))) (if (= Tm9192 ()) (thaw GoTo9193) (if (shen.pvar? Tm9192) (shen.bind! Tm9192 () V9555 GoTo9193) false)))) false)) false) (if (= C9190 false) (if (shen.unlocked? V9556) (let Tm9194 (shen.lazyderef V9553 V9555) (if (cons? Tm9194) (let P (hd Tm9194) (let Ps (tl Tm9194) (let Tm9195 (shen.lazyderef V9554 V9555) (let GoTo9196 (lambda Q (lambda Colon (lambda A (lambda Hyps (do (shen.incinfs) (bind Q P V9555 V9556 V9557 (freeze (bind Colon (intern ":") V9555 V9556 V9557 (freeze (shen.p-hyps Ps Hyps V9555 V9556 V9557 V9558)))))))))) (if (cons? Tm9195) (let Tm9197 (shen.lazyderef (hd Tm9195) V9555) (let GoTo9198 (lambda Q (lambda Colon (lambda A (let Hyps (tl Tm9195) ((((GoTo9196 Q) Colon) A) Hyps))))) (if (cons? Tm9197) (let Q (hd Tm9197) (let Tm9199 (shen.lazyderef (tl Tm9197) V9555) (let GoTo9200 (lambda Colon (lambda A (((GoTo9198 Q) Colon) A))) (if (cons? Tm9199) (let Colon (hd Tm9199) (let Tm9201 (shen.lazyderef (tl Tm9199) V9555) (let GoTo9202 (lambda A ((GoTo9200 Colon) A)) (if (cons? Tm9201) (let A (hd Tm9201) (let Tm9203 (shen.lazyderef (tl Tm9201) V9555) (let GoTo9204 (freeze (GoTo9202 A)) (if (= Tm9203 ()) (thaw GoTo9204) (if (shen.pvar? Tm9203) (shen.bind! Tm9203 () V9555 GoTo9204) false))))) (if (shen.pvar? Tm9201) (let A (shen.newpv V9555) (shen.gc V9555 (shen.bind! Tm9201 (cons A ()) V9555 (freeze (GoTo9202 A))))) false))))) (if (shen.pvar? Tm9199) (let Colon (shen.newpv V9555) (shen.gc V9555 (let A (shen.newpv V9555) (shen.gc V9555 (shen.bind! Tm9199 (cons Colon (cons A ())) V9555 (freeze ((GoTo9200 Colon) A))))))) false))))) (if (shen.pvar? Tm9197) (let Q (shen.newpv V9555) (shen.gc V9555 (let Colon (shen.newpv V9555) (shen.gc V9555 (let A (shen.newpv V9555) (shen.gc V9555 (shen.bind! Tm9197 (cons Q (cons Colon (cons A ()))) V9555 (freeze (((GoTo9198 Q) Colon) A))))))))) false)))) (if (shen.pvar? Tm9195) (let Q (shen.newpv V9555) (shen.gc V9555 (let Colon (shen.newpv V9555) (shen.gc V9555 (let A (shen.newpv V9555) (shen.gc V9555 (let Hyps (shen.newpv V9555) (shen.gc V9555 (shen.bind! Tm9195 (cons (cons Q (cons Colon (cons A ()))) Hyps) V9555 (freeze ((((GoTo9196 Q) Colon) A) Hyps))))))))))) false)))))) false)) false) C9190)))

(defun shen.t*-correct (V9559 V9560 V9561 V9562 V9563 V9564 V9565) (let K9207 (+ V9564 1) (let C9212 (if (shen.unlocked? V9563) (let Tm9213 (shen.lazyderef V9559 V9562) (if (cons? Tm9213) (let Tm9214 (shen.lazyderef (hd Tm9213) V9562) (if (= Tm9214 where) (let Tm9215 (shen.lazyderef (tl Tm9213) V9562) (if (cons? Tm9215) (let G (hd Tm9215) (let Tm9216 (shen.lazyderef (tl Tm9215) V9562) (if (cons? Tm9216) (let R (hd Tm9216) (let Tm9217 (shen.lazyderef (tl Tm9216) V9562) (if (= Tm9217 ()) (let CurryG (shen.newpv V9562) (shen.gc V9562 (do (shen.incinfs) (shen.cut V9562 V9563 K9207 (freeze (bind CurryG (shen.curry G) V9562 V9563 K9207 (freeze (shen.system-S-h CurryG boolean V9561 V9562 V9563 K9207 (freeze (shen.cut V9562 V9563 K9207 (freeze (shen.t*-correct R V9560 (cons (cons CurryG (cons (intern ":") (cons verified ()))) V9561) V9562 V9563 K9207 V9565)))))))))))) false))) false))) false)) false)) false)) false) (if (= C9212 false) (let C9218 (if (shen.unlocked? V9563) (do (shen.incinfs) (shen.system-S-h (shen.curry V9559) V9560 V9561 V9562 V9563 K9207 V9565)) false) (if (= C9218 false) (shen.unlock V9563 K9207) C9218)) C9212))))

(defun shen.t*-integrity (V9566 V9567 V9568 V9569 V9570 V9571 V9572 V9573) (let C9228 (if (shen.unlocked? V9571) (let Tm9229 (shen.lazyderef V9566 V9570) (if (= Tm9229 ()) (do (shen.incinfs) (is! V9567 V9569 V9570 V9571 V9572 V9573)) false)) false) (if (= C9228 false) (if (shen.unlocked? V9571) (let Tm9230 (shen.lazyderef V9566 V9570) (if (cons? Tm9230) (let P (hd Tm9230) (let Ps (tl Tm9230) (let Tm9231 (shen.lazyderef V9567 V9570) (if (cons? Tm9231) (let A (hd Tm9231) (let Tm9232 (shen.lazyderef (tl Tm9231) V9570) (if (cons? Tm9232) (let Tm9233 (shen.lazyderef (hd Tm9232) V9570) (if (= Tm9233 -->) (let Tm9234 (shen.lazyderef (tl Tm9232) V9570) (if (cons? Tm9234) (let B (hd Tm9234) (let Tm9235 (shen.lazyderef (tl Tm9234) V9570) (if (= Tm9235 ()) (do (shen.incinfs) (shen.system-S-h P A V9568 V9570 V9571 V9572 (freeze (shen.t*-integrity Ps B V9568 V9569 V9570 V9571 V9572 V9573)))) false))) false)) false)) false))) false)))) false)) false) C9228)))

(defun shen.freshterm? (V9574) (and (absvector? V9574) (and (not (string? V9574)) (= (<-address V9574 0) shen.print-freshterm))))

