(defun load (V6823) (let TC? (value shen.*tc*) (let Load (let Start (get-time run) (let Result (shen.load-help TC? (read-file V6823)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (pr (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if TC? (pr (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded))))

(defun shen.load-help (V6826 V6827) (cond ((= false V6826) (shen.eval-and-print V6827)) (true (shen.check-eval-and-print V6827))))

(defun shen.eval-and-print (V6828) (map (lambda Y (pr (shen.app (eval-kl (shen.shen->kl Y)) "
" shen.s) (stoutput))) V6828))

(defun shen.check-eval-and-print (V6829) (let Table (mapcan (lambda Y (shen.typetable Y)) V6829) (let Assume (trap-error (shen.assumetypes Table) (lambda E (shen.unwind-types E Table))) (trap-error (shen.work-through V6829) (lambda E (shen.unwind-types E Table))))))

(defun shen.typetable (V6834) (cond ((and (cons? V6834) (and (= define (hd V6834)) (and (cons? (tl V6834)) (and (cons? (tl (tl V6834))) (= { (hd (tl (tl V6834)))))))) (cons (hd (tl V6834)) (cons (shen.rectify-type (shen.type-F (hd (tl V6834)) (tl (tl (tl V6834))))) ()))) ((and (cons? V6834) (and (= define (hd V6834)) (cons? (tl V6834)))) (simple-error (cn "missing { in " (shen.app (hd (tl V6834)) "
" shen.a)))) (true ())))

(defun shen.type-F (V6841 V6842) (cond ((and (cons? V6842) (= } (hd V6842))) ()) ((cons? V6842) (cons (hd V6842) (shen.type-F V6841 (tl V6842)))) (true (simple-error (cn "missing } in " (shen.app V6841 "
" shen.a))))))

(defun shen.assumetypes (V6845) (cond ((= () V6845) ()) ((and (cons? V6845) (cons? (tl V6845))) (do (declare (hd V6845) (hd (tl V6845))) (shen.assumetypes (tl (tl V6845))))) (true (simple-error "implementation error in shen.assumetype"))))

(defun shen.unwind-types (V6850 V6851) (cond ((and (cons? V6851) (cons? (hd V6851))) (do (destroy (hd (hd V6851))) (shen.unwind-types V6850 (tl V6851)))) (true (simple-error (error-to-string V6850)))))

(defun shen.work-through (V6854) (cond ((= () V6854) ()) ((and (cons? V6854) (and (cons? (tl V6854)) (and (cons? (tl (tl V6854))) (= (hd (tl V6854)) (intern ":"))))) (let Check (shen.typecheck (hd V6854) (hd (tl (tl V6854)))) (if (= Check false) (shen.type-error) (let Eval (eval-kl (shen.shen->kl (hd V6854))) (let Message (pr (shen.app Eval (cn " : " (shen.app (shen.pretty-type Check) "
" shen.r)) shen.s) (stoutput)) (shen.work-through (tl (tl (tl V6854))))))))) ((cons? V6854) (shen.work-through (cons (hd V6854) (cons (intern ":") (cons A (tl V6854)))))) (true (simple-error "implementation error in shen.work-through"))))

(defun shen.pretty-type (V6856) (cond ((and (cons? V6856) (and (cons? (hd V6856)) (and (= str (hd (hd V6856))) (and (cons? (tl (hd V6856))) (and (cons? (hd (tl (hd V6856)))) (and (= list (hd (hd (tl (hd V6856))))) (and (cons? (tl (hd (tl (hd V6856))))) (and (= () (tl (tl (hd (tl (hd V6856)))))) (and (cons? (tl (tl (hd V6856)))) (and (= () (tl (tl (tl (hd V6856))))) (and (cons? (tl V6856)) (and (= --> (hd (tl V6856))) (and (cons? (tl (tl V6856))) (and (cons? (hd (tl (tl V6856)))) (and (= str (hd (hd (tl (tl V6856))))) (and (cons? (tl (hd (tl (tl V6856))))) (and (cons? (hd (tl (hd (tl (tl V6856)))))) (and (= list (hd (hd (tl (hd (tl (tl V6856))))))) (and (cons? (tl (hd (tl (hd (tl (tl V6856))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V6856)))))))) (and (cons? (tl (tl (hd (tl (tl V6856)))))) (and (= () (tl (tl (tl (hd (tl (tl V6856))))))) (and (= () (tl (tl (tl V6856)))) (= (hd (tl (hd (tl (hd V6856))))) (hd (tl (hd (tl (hd (tl (tl V6856))))))))))))))))))))))))))))))) (cons (hd (tl (hd (tl (tl V6856))))) (cons ==> (tl (tl (hd (tl (tl V6856)))))))) (true V6856)))

(defun shen.type-error () (simple-error "type error
"))

(defun bootstrap (V6857) (let KLFile (shen.klfile V6857) (let Code (read-file V6857) (let Open (open KLFile out) (let KL (map (lambda X (shen.shen->kl-h X)) Code) (let Write (shen.write-kl KL Open) KLFile))))))

(defun shen.write-kl (V6860 V6861) (cond ((= () V6860) (close V6861)) ((and (cons? V6860) (cons? (hd V6860))) (shen.write-kl (tl V6860) (do (shen.write-kl-h (hd V6860) V6861) V6861))) ((cons? V6860) (shen.write-kl (tl V6860) V6861)) (true (shen.f-error shen.write-kl))))

(defun shen.write-kl-h (V6864 V6865) (cond ((and (cons? V6864) (and (= defun (hd V6864)) (and (cons? (tl V6864)) (and (= fail (hd (tl V6864))) (and (cons? (tl (tl V6864))) (and (= () (hd (tl (tl V6864)))) (and (cons? (tl (tl (tl V6864)))) (= () (tl (tl (tl (tl V6864)))))))))))) (pr "(defun fail () shen.fail!)" V6865)) (true (pr (shen.app V6864 "

" shen.r) V6865))))

(defun shen.klfile (V6866) (cond ((= "" V6866) ".kl") ((= ".shen" V6866) ".kl") ((shen.+string? V6866) (@s (hdstr V6866) (shen.klfile (tlstr V6866)))) (true (shen.f-error shen.klfile))))

