(defun compile (V6258 V6259) (let Compile (V6258 (cons V6259 (cons shen.no-action ()))) (if (shen.parsed? Compile) (shen.objectcode Compile) (simple-error "parse failure
"))))

(defun shen.parsed? (V6264) (cond ((shen.parse-failure? V6264) false) ((and (cons? V6264) (cons? (hd V6264))) (do (set shen.*residue* (hd V6264)) (simple-error (cn "syntax error here: " (shen.app (hd V6264) "
 ..." shen.r))))) (true true)))

(defun shen.parse-failure? (V6265) (= V6265 (fail)))

(defun shen.objectcode (V6268) (cond ((and (cons? V6268) (and (cons? (tl V6268)) (= () (tl (tl V6268))))) (hd (tl V6268))) (true (simple-error (shen.app V6268 " is not a YACC stream
" shen.s)))))

(defun shen.yacc->shen (V6269) (compile (lambda X (shen.<yacc> X)) V6269))

(defun shen.<yacc> (V6270) (let Result (if (shen.non-empty-stream? V6270) (let F (shen.hds V6270) (let News6151 (shen.tls V6270) (let Parseshen.<yaccsig> (shen.<yaccsig> News6151) (if (shen.parse-failure? Parseshen.<yaccsig>) (shen.parse-failure) (let Parseshen.<c-rules> (shen.<c-rules> Parseshen.<yaccsig>) (if (shen.parse-failure? Parseshen.<c-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<c-rules>) (let Stream (gensym S) (let Def (append (cons define (cons F ())) (append (shen.<-out Parseshen.<yaccsig>) (cons Stream (cons -> (cons (shen.c-rules->shen (shen.<-out Parseshen.<yaccsig>) Stream (shen.<-out Parseshen.<c-rules>)) ()))))) Def))))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<yaccsig> (V6271) (let Result (if (shen.non-empty-stream? V6271) (let LC (shen.hds V6271) (let News6153 (shen.tls V6271) (if (shen.ccons? News6153) (let SynCons (shen.comb (shen.hds News6153) (shen.<-out News6153)) (if (shen.=hd? SynCons list) (let News6154 (shen.tls SynCons) (if (shen.non-empty-stream? News6154) (let A (shen.hds News6154) (let News6155 (shen.tls News6154) (let Parseshen.<end> (shen.<end> News6155) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (if (shen.=hd? (shen.tlstream News6153) ==>) (let News6156 (shen.tls (shen.tlstream News6153)) (if (shen.non-empty-stream? News6156) (let B (shen.hds News6156) (let News6157 (shen.tls News6156) (if (shen.non-empty-stream? News6157) (let RC (shen.hds News6157) (let News6158 (shen.tls News6157) (if (and (= { LC) (= } RC)) (shen.comb (shen.in-> News6158) (let C (gensym C) (cons { (cons (cons str (cons (cons list (cons A ())) (cons C ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons } ()))))))) (shen.parse-failure)))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (shen.parse-failure))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V6271) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<c-rules> (V6272) (let Result (let Parseshen.<c-rule> (shen.<c-rule> V6272) (if (shen.parse-failure? Parseshen.<c-rule>) (shen.parse-failure) (let Parseshen.<c-rules> (shen.<c-rules> Parseshen.<c-rule>) (if (shen.parse-failure? Parseshen.<c-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<c-rules>) (cons (shen.<-out Parseshen.<c-rule>) (shen.<-out Parseshen.<c-rules>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V6272) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "YACC syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<c-rule> (V6273) (let Result (let Parseshen.<syntax> (shen.<syntax> V6273) (if (shen.parse-failure? Parseshen.<syntax>) (shen.parse-failure) (let Parseshen.<semantics> (shen.<semantics> Parseshen.<syntax>) (if (shen.parse-failure? Parseshen.<semantics>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<semantics>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<syntax>) (cons (shen.<-out Parseshen.<semantics>) ()))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<syntax> (shen.<syntax> V6273) (if (shen.parse-failure? Parseshen.<syntax>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<syntax>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<syntax>) (cons (shen.autocomplete (shen.<-out Parseshen.<syntax>)) ()))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.autocomplete (V6274) (cond ((and (cons? V6274) (and (= () (tl V6274)) (shen.non-terminal? (hd V6274)))) (hd V6274)) ((and (cons? V6274) (shen.non-terminal? (hd V6274))) (cons append (cons (hd V6274) (cons (shen.autocomplete (tl V6274)) ())))) ((cons? V6274) (cons cons (cons (shen.autocomplete (hd V6274)) (cons (shen.autocomplete (tl V6274)) ())))) (true V6274)))

(defun shen.non-terminal? (V6275) (and (symbol? V6275) (let Explode (explode V6275) (compile (lambda X (shen.<non-terminal?> X)) Explode))))

(defun shen.<non-terminal?> (V6276) (let Result (let Parseshen.<packagenames> (shen.<packagenames> V6276) (if (shen.parse-failure? Parseshen.<packagenames>) (shen.parse-failure) (let Parseshen.<non-terminal-name> (shen.<non-terminal-name> Parseshen.<packagenames>) (if (shen.parse-failure? Parseshen.<non-terminal-name>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<non-terminal-name>) true))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<non-terminal-name> (shen.<non-terminal-name> V6276) (if (shen.parse-failure? Parseshen.<non-terminal-name>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<non-terminal-name>) true))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V6276) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) false))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<packagenames> (V6277) (let Result (let Parseshen.<packagename> (shen.<packagename> V6277) (if (shen.parse-failure? Parseshen.<packagename>) (shen.parse-failure) (if (shen.=hd? Parseshen.<packagename> ".") (let News6163 (shen.tls Parseshen.<packagename>) (let Parseshen.<packagenames> (shen.<packagenames> News6163) (if (shen.parse-failure? Parseshen.<packagenames>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<packagenames>) shen.skip)))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<packagename> (shen.<packagename> V6277) (if (shen.parse-failure? Parseshen.<packagename>) (shen.parse-failure) (if (shen.=hd? Parseshen.<packagename> ".") (let News6164 (shen.tls Parseshen.<packagename>) (shen.comb (shen.in-> News6164) shen.skip)) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<packagename> (V6278) (let Result (let Parseshen.<packagechar> (shen.<packagechar> V6278) (if (shen.parse-failure? Parseshen.<packagechar>) (shen.parse-failure) (let Parseshen.<packagename> (shen.<packagename> Parseshen.<packagechar>) (if (shen.parse-failure? Parseshen.<packagename>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<packagename>) shen.skip))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V6278) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) shen.skip))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<packagechar> (V6279) (let Result (if (shen.non-empty-stream? V6279) (let X (shen.hds V6279) (let News6167 (shen.tls V6279) (if (not (= X ".")) (shen.comb (shen.in-> News6167) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<non-terminal-name> (V6280) (let Result (if (shen.=hd? V6280 "<") (let News6169 (shen.tls V6280) (let Parse<!> (<!> News6169) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (if (let Reverse (reverse (shen.<-out Parse<!>)) (and (cons? Reverse) (= (hd Reverse) ">"))) (shen.comb (shen.in-> Parse<!>) shen.skip) (shen.parse-failure))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.semicolon? (V6281) (= V6281 (intern ";")))

(defun shen.<colon-equal> (V6282) (let Result (if (shen.non-empty-stream? V6282) (let X (shen.hds V6282) (let News6171 (shen.tls V6282) (if (shen.colon-equal? X) (shen.comb (shen.in-> News6171) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.colon-equal? (V6283) (= (intern ":=") V6283))

(defun shen.<syntax> (V6284) (let Result (let Parseshen.<syntax-item> (shen.<syntax-item> V6284) (if (shen.parse-failure? Parseshen.<syntax-item>) (shen.parse-failure) (let Parseshen.<syntax> (shen.<syntax> Parseshen.<syntax-item>) (if (shen.parse-failure? Parseshen.<syntax>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<syntax>) (cons (shen.<-out Parseshen.<syntax-item>) (shen.<-out Parseshen.<syntax>))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<syntax-item> (shen.<syntax-item> V6284) (if (shen.parse-failure? Parseshen.<syntax-item>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<syntax-item>) (cons (shen.<-out Parseshen.<syntax-item>) ())))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<syntax-item> (V6285) (let Result (if (shen.non-empty-stream? V6285) (let X (shen.hds V6285) (let News6174 (shen.tls V6285) (if (shen.syntax-item? X) (shen.comb (shen.in-> News6174) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.syntax-item? (V6288) (cond ((shen.colon-equal? V6288) false) ((shen.semicolon? V6288) false) ((atom? V6288) true) ((and (cons? V6288) (and (= cons (hd V6288)) (and (cons? (tl V6288)) (and (cons? (tl (tl V6288))) (= () (tl (tl (tl V6288)))))))) (and (shen.syntax-item? (hd (tl V6288))) (shen.syntax-item? (hd (tl (tl V6288)))))) (true false)))

(defun shen.<semantics> (V6289) (let Result (let Parseshen.<colon-equal> (shen.<colon-equal> V6289) (if (shen.parse-failure? Parseshen.<colon-equal>) (shen.parse-failure) (if (shen.non-empty-stream? Parseshen.<colon-equal>) (let Semantics (shen.hds Parseshen.<colon-equal>) (let News6176 (shen.tls Parseshen.<colon-equal>) (if (shen.=hd? News6176 where) (let News6177 (shen.tls News6176) (if (shen.non-empty-stream? News6177) (let Guard (shen.hds News6177) (let News6178 (shen.tls News6177) (if (not (shen.semicolon? Semantics)) (shen.comb (shen.in-> News6178) (cons where (cons Guard (cons Semantics ())))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<colon-equal> (shen.<colon-equal> V6289) (if (shen.parse-failure? Parseshen.<colon-equal>) (shen.parse-failure) (if (shen.non-empty-stream? Parseshen.<colon-equal>) (let Semantics (shen.hds Parseshen.<colon-equal>) (let News6179 (shen.tls Parseshen.<colon-equal>) (if (not (shen.semicolon? Semantics)) (shen.comb (shen.in-> News6179) Semantics) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.c-rules->shen (V6298 V6299 V6300) (cond ((= () V6300) (cons shen.parse-failure ())) ((cons? V6300) (shen.combine-c-code (shen.c-rule->shen V6298 (hd V6300) V6299) (shen.c-rules->shen V6298 V6299 (tl V6300)))) (true (simple-error "implementation error in shen.c-rules->shen
"))))

(defun shen.parse-failure () (fail))

(defun shen.combine-c-code (V6301 V6302) (cons let (cons Result (cons V6301 (cons (cons if (cons (cons shen.parse-failure? (cons Result ())) (cons V6302 (cons Result ())))) ())))))

(defun shen.c-rule->shen (V6309 V6310 V6311) (cond ((and (cons? V6310) (and (cons? (tl V6310)) (= () (tl (tl V6310))))) (shen.yacc-syntax V6309 V6311 (hd V6310) (hd (tl V6310)))) (true (simple-error "implementation error in shen.c-rule->shen
"))))

(defun shen.yacc-syntax (V6320 V6321 V6322 V6323) (cond ((and (= () V6322) (and (cons? V6323) (and (= where (hd V6323)) (and (cons? (tl V6323)) (and (cons? (tl (tl V6323))) (= () (tl (tl (tl V6323))))))))) (cons if (cons (shen.process-yacc-semantics (hd (tl V6323))) (cons (shen.yacc-syntax V6320 V6321 () (hd (tl (tl V6323)))) (cons (cons shen.parse-failure ()) ()))))) ((= () V6322) (shen.yacc-semantics V6320 V6321 V6323)) ((cons? V6322) (if (shen.non-terminal? (hd V6322)) (shen.non-terminalcode V6320 V6321 (hd V6322) (tl V6322) V6323) (if (variable? (hd V6322)) (shen.variablecode V6320 V6321 (hd V6322) (tl V6322) V6323) (if (= _ (hd V6322)) (shen.wildcardcode V6320 V6321 (hd V6322) (tl V6322) V6323) (if (atom? (hd V6322)) (shen.terminalcode V6320 V6321 (hd V6322) (tl V6322) V6323) (if (cons? (hd V6322)) (shen.conscode V6320 V6321 (hd V6322) (tl V6322) V6323) (simple-error "implementation error in shen.yacc-syntax
"))))))) (true (simple-error "implementation error in shen.yacc-syntax
"))))

(defun shen.non-terminalcode (V6324 V6325 V6326 V6327 V6328) (let ApplyNonTerminal (concat Parse V6326) (cons let (cons ApplyNonTerminal (cons (cons V6326 (cons V6325 ())) (cons (cons if (cons (cons shen.parse-failure? (cons ApplyNonTerminal ())) (cons (cons shen.parse-failure ()) (cons (shen.yacc-syntax V6324 ApplyNonTerminal V6327 V6328) ())))) ()))))))

(defun shen.variablecode (V6329 V6330 V6331 V6332 V6333) (let NewStream (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V6330 ())) (cons (cons let (cons V6331 (cons (cons shen.hds (cons V6330 ())) (cons NewStream (cons (cons shen.tls (cons V6330 ())) (cons (shen.yacc-syntax V6329 NewStream V6332 V6333) ())))))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.wildcardcode (V6334 V6335 V6336 V6337 V6338) (let NewStream (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V6335 ())) (cons (cons let (cons NewStream (cons (cons shen.tls (cons V6335 ())) (cons (shen.yacc-syntax V6334 NewStream V6337 V6338) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.terminalcode (V6339 V6340 V6341 V6342 V6343) (let NewStream (gensym News) (cons if (cons (cons shen.=hd? (cons V6340 (cons V6341 ()))) (cons (cons let (cons NewStream (cons (cons shen.tls (cons V6340 ())) (cons (shen.yacc-syntax V6339 NewStream V6342 V6343) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.conscode (V6344 V6345 V6346 V6347 V6348) (cons if (cons (cons shen.ccons? (cons V6345 ())) (cons (cons let (cons SynCons (cons (cons shen.comb (cons (cons shen.hds (cons V6345 ())) (cons (cons shen.<-out (cons V6345 ())) ()))) (cons (shen.yacc-syntax V6344 SynCons (append (shen.decons V6346) (cons shen.<end> ())) (cons shen.pushsemantics (cons (cons shen.tlstream (cons V6345 ())) (cons V6347 (cons V6348 ()))))) ())))) (cons (cons shen.parse-failure ()) ())))))

(defun shen.decons (V6349) (cond ((and (cons? V6349) (and (= cons (hd V6349)) (and (cons? (tl V6349)) (and (cons? (tl (tl V6349))) (= () (tl (tl (tl V6349)))))))) (cons (hd (tl V6349)) (shen.decons (hd (tl (tl V6349)))))) (true V6349)))

(defun shen.ccons? (V6356) (cond ((and (cons? V6356) (and (cons? (hd V6356)) (and (cons? (tl V6356)) (= () (tl (tl V6356)))))) (cons? (hd (hd V6356)))) (true false)))

(defun shen.non-empty-stream? (V6365) (cond ((and (cons? V6365) (cons? (hd V6365))) true) (true false)))

(defun shen.hds (V6366) (hd (hd V6366)))

(defun shen.hdstream (V6371) (cond ((and (cons? V6371) (and (cons? (hd V6371)) (and (cons? (tl V6371)) (= () (tl (tl V6371)))))) (cons (hd (hd V6371)) (tl V6371))) (true (simple-error "implementation error in shen.hdstream
"))))

(defun shen.comb (V6372 V6373) (cons V6372 (cons V6373 ())))

(defun shen.tlstream (V6378) (cond ((and (cons? V6378) (and (cons? (hd V6378)) (and (cons? (tl V6378)) (= () (tl (tl V6378)))))) (cons (tl (hd V6378)) (tl V6378))) (true (simple-error "implementation error in shen.tlstream
"))))

(defun shen.=hd? (V6388 V6389) (cond ((and (cons? V6388) (and (cons? (hd V6388)) (= (hd (hd V6388)) V6389))) true) (true false)))

(defun shen.tls (V6394) (cond ((and (cons? V6394) (and (cons? (hd V6394)) (and (cons? (tl V6394)) (= () (tl (tl V6394)))))) (cons (tl (hd V6394)) (tl V6394))) (true (simple-error "implementation error in shen.tls
"))))

(defun shen.yacc-semantics (V6397 V6398 V6399) (cond ((and (cons? V6399) (and (= shen.pushsemantics (hd V6399)) (and (cons? (tl V6399)) (and (cons? (tl (tl V6399))) (and (cons? (tl (tl (tl V6399)))) (= () (tl (tl (tl (tl V6399)))))))))) (shen.yacc-syntax V6397 (hd (tl V6399)) (hd (tl (tl V6399))) (hd (tl (tl (tl V6399)))))) (true (let Process (shen.process-yacc-semantics V6399) (let Annotate (shen.use-type-info V6397 Process) (cons shen.comb (cons (cons shen.in-> (cons V6398 ())) (cons Annotate ()))))))))

(defun shen.use-type-info (V6403 V6404) (cond ((and (cons? V6403) (and (= { (hd V6403)) (and (cons? (tl V6403)) (and (cons? (hd (tl V6403))) (and (= str (hd (hd (tl V6403)))) (and (cons? (tl (hd (tl V6403)))) (and (cons? (hd (tl (hd (tl V6403))))) (and (= list (hd (hd (tl (hd (tl V6403)))))) (and (cons? (tl (hd (tl (hd (tl V6403)))))) (and (= () (tl (tl (hd (tl (hd (tl V6403))))))) (and (cons? (tl (tl (hd (tl V6403))))) (and (= () (tl (tl (tl (hd (tl V6403)))))) (and (cons? (tl (tl V6403))) (and (= --> (hd (tl (tl V6403)))) (and (cons? (tl (tl (tl V6403)))) (and (cons? (hd (tl (tl (tl V6403))))) (and (= str (hd (hd (tl (tl (tl V6403)))))) (and (cons? (tl (hd (tl (tl (tl V6403)))))) (and (cons? (hd (tl (hd (tl (tl (tl V6403))))))) (and (= list (hd (hd (tl (hd (tl (tl (tl V6403)))))))) (and (cons? (tl (hd (tl (hd (tl (tl (tl V6403)))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl (tl V6403))))))))) (and (cons? (tl (tl (hd (tl (tl (tl V6403))))))) (and (= () (tl (tl (tl (hd (tl (tl (tl V6403)))))))) (and (cons? (tl (tl (tl (tl V6403))))) (and (= } (hd (tl (tl (tl (tl V6403)))))) (and (= () (tl (tl (tl (tl (tl V6403)))))) (= (hd (tl (hd (tl (hd (tl V6403)))))) (hd (tl (hd (tl (hd (tl (tl (tl V6403)))))))))))))))))))))))))))))))))))) (cons type (cons V6404 (tl (tl (hd (tl (tl (tl V6403))))))))) (true V6404)))

(defun shen.process-yacc-semantics (V6405) (cond ((cons? V6405) (map (lambda Z (shen.process-yacc-semantics Z)) V6405)) ((shen.non-terminal? V6405) (cons shen.<-out (cons (concat Parse V6405) ()))) (true V6405)))

(defun shen.<-out (V6410) (cond ((and (cons? V6410) (and (cons? (tl V6410)) (= () (tl (tl V6410))))) (hd (tl V6410))) (true (simple-error "implementation error in shen.<-out
"))))

(defun shen.in-> (V6415) (cond ((and (cons? V6415) (and (cons? (tl V6415)) (= () (tl (tl V6415))))) (hd V6415)) (true (simple-error "implementation error in shen.in->
"))))

(defun <!> (V6420) (cond ((and (cons? V6420) (and (cons? (tl V6420)) (= () (tl (tl V6420))))) (cons () (cons (hd V6420) ()))) (true (simple-error "implementation error in <!>
"))))

(defun <e> (V6425) (cond ((and (cons? V6425) (and (cons? (tl V6425)) (= () (tl (tl V6425))))) (cons (hd V6425) (cons () ()))) (true (simple-error "implementation error in <e>
"))))

(defun shen.<end> (V6428) (cond ((and (cons? V6428) (and (= () (hd V6428)) (and (cons? (tl V6428)) (= () (tl (tl V6428)))))) V6428) (true (shen.parse-failure))))

